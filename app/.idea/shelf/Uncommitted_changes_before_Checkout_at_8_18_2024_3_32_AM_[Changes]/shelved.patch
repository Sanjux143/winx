Index: src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <string name=\"app_name\">Winlator</string>\r\n    <string name=\"run\">Run</string>\r\n    <string name=\"edit\">Edit</string>\r\n    <string name=\"remove\">Remove</string>\r\n    <string name=\"add\">Add</string>\r\n    <string name=\"shortcuts\">Shortcuts</string>\r\n    <string name=\"containers\">Containers</string>\r\n    <string name=\"input_controls\">Input Controls</string>\r\n    <string name=\"no_items_to_display\">No items to display</string>\r\n    <string name=\"new_container\">New Container</string>\r\n    <string name=\"edit_container\">Edit Container</string>\r\n    <string name=\"creating_container\">Creating Container…</string>\r\n    <string name=\"removing_container\">Removing Container…</string>\r\n    <string name=\"duplicating_container\">Duplicating Container…</string>\r\n    <string name=\"installing_system_files\">Installing System Files…</string>\r\n    <string name=\"updating_system_files\">Updating System Files…</string>\r\n    <string name=\"starting_up\">Starting up…</string>\r\n    <string name=\"unable_to_install_system_files\">Unable to install system files</string>\r\n    <string name=\"keyboard\">Keyboard</string>\r\n    <string name=\"toggle_fullscreen\">Toggle Fullscreen</string>\r\n    <string name=\"exit\">Exit</string>\r\n    <string name=\"no_control_element_selected\">No control element selected</string>\r\n    <string name=\"scale\">Scale</string>\r\n    <string name=\"shape\">Shape</string>\r\n    <string name=\"type\">Type</string>\r\n    <string name=\"binding\">Binding</string>\r\n    <string name=\"binding_up\">Binding Up</string>\r\n    <string name=\"binding_right\">Binding Right</string>\r\n    <string name=\"binding_down\">Binding Down</string>\r\n    <string name=\"binding_left\">Binding Left</string>\r\n    <string name=\"overlay_opacity\">Overlay Opacity</string>\r\n    <string name=\"profile\">Profile</string>\r\n    <string name=\"select_profile\">Select Profile</string>\r\n    <string name=\"profile_name\">Profile Name</string>\r\n    <string name=\"name\">Name</string>\r\n    <string name=\"ok\">OK</string>\r\n    <string name=\"cancel\">Cancel</string>\r\n    <string name=\"untitled\">Untitled</string>\r\n    <string name=\"no_profile_selected\">No profile selected</string>\r\n    <string name=\"no_profile_found\">No profile found</string>\r\n    <string name=\"do_you_want_to_remove_this_profile\">Do you want to remove this profile?</string>\r\n    <string name=\"do_you_want_to_duplicate_this_profile\">Do you want to duplicate this profile?</string>\r\n    <string name=\"do_you_want_to_duplicate_this_preset\">Do you want to duplicate this preset?</string>\r\n    <string name=\"do_you_want_to_remove_this_container\">Do you want to remove this container?</string>\r\n    <string name=\"do_you_want_to_duplicate_this_container\">Do you want to duplicate this container?</string>\r\n    <string name=\"do_you_want_to_remove_this_shortcut\">Do you want to remove this shortcut?</string>\r\n    <string name=\"do_you_want_to_remove_this_controller\">Do you want to remove this controller?</string>\r\n    <string name=\"do_you_want_to_remove_this_wine_version\">Do you want to remove this wine version?</string>\r\n    <string name=\"do_you_want_to_remove_this_preset\">Do you want to remove this preset?</string>\r\n    <string name=\"do_you_want_to_end_this_process\">Do you want to end this process?</string>\r\n    <string name=\"controls_editor\">Controls Editor</string>\r\n    <string name=\"enabled\">Enabled</string>\r\n    <string name=\"disabled\">Disabled</string>\r\n    <string name=\"container\">Container</string>\r\n    <string name=\"screen_size\">Screen Size</string>\r\n    <string name=\"new_environment_variable\">New Environment Variable</string>\r\n    <string name=\"environment_variables\">Environment Variables</string>\r\n    <string name=\"value\">Value</string>\r\n    <string name=\"processor_affinity\">Processor Affinity</string>\r\n    <string name=\"processor_affinity_32_bit_apps\">Processor Affinity (32-bit apps)</string>\r\n    <string name=\"cursor_speed\">Cursor Speed</string>\r\n    <string name=\"relative_mouse_movement\">Relative Mouse Movement</string>\r\n    <string name=\"toggle_switch\">Toggle Switch</string>\r\n    <string name=\"profile_exported_to\">Profile exported to</string>\r\n    <string name=\"unable_to_import_profile\">Unable to import profile</string>\r\n    <string name=\"wine_configuration\">Wine Configuration</string>\r\n    <string name=\"registry_keys\">Registry Keys</string>\r\n    <string name=\"csmt\">CSMT (Command Stream Multi-Thread)</string>\r\n    <string name=\"gpu_name\">GPU Name</string>\r\n    <string name=\"offscreen_rendering_mode\">Offscreen Rendering Mode</string>\r\n    <string name=\"strict_shader_math\">Strict Shader Math</string>\r\n    <string name=\"video_memory_size\">Video Memory Size</string>\r\n    <string name=\"show_fps\">Show FPS</string>\r\n    <string name=\"none\">None</string>\r\n    <string name=\"custom_text\">Custom Text</string>\r\n    <string name=\"icon\">Icon</string>\r\n    <string name=\"import_profile\">Import Profile</string>\r\n    <string name=\"export_profile\">Export Profile</string>\r\n    <string name=\"touchpad_help\">Touchpad Help</string>\r\n    <string name=\"touchpad_help_mouse_left_click_title\">Mouse Left-Click</string>\r\n    <string name=\"touchpad_help_mouse_left_click_description\">Short tap with one finger</string>\r\n    <string name=\"touchpad_help_mouse_right_click_title\">Mouse Right-Click</string>\r\n    <string name=\"touchpad_help_mouse_right_click_description\">Tap with one finger and short tap with another finger</string>\r\n    <string name=\"touchpad_help_mouse_scroll_wheel_title\">Mouse Scroll Wheel</string>\r\n    <string name=\"touchpad_help_mouse_scroll_wheel_description\">Two fingers tap and move</string>\r\n    <string name=\"touchpad_help_main_menu_title\">Main Menu</string>\r\n    <string name=\"touchpad_help_main_menu_description\">Four fingers tap</string>\r\n    <string name=\"duplicate\">Duplicate</string>\r\n    <string name=\"about\">About</string>\r\n    <string name=\"credits_and_third_party_apps\">Credits and Third-party apps</string>\r\n    <string name=\"external_controllers\">External Controllers</string>\r\n    <string name=\"graphics_driver\">Graphics Driver</string>\r\n    <string name=\"audio_driver\">Audio Driver</string>\r\n    <string name=\"loading\">Loading…</string>\r\n    <string name=\"press_any_button_on_your_controller\">Press any button on your controller</string>\r\n    <string name=\"bindings\">bindings</string>\r\n    <string name=\"show_touchscreen_controls\">Show Touchscreen Controls</string>\r\n    <string name=\"dxwrapper\">DX Wrapper</string>\r\n    <string name=\"mouse_warp_override\">Mouse Warp Override</string>\r\n    <string name=\"direct3d\">Direct3D</string>\r\n    <string name=\"directsound\">DirectSound</string>\r\n    <string name=\"directmusic\">DirectMusic</string>\r\n    <string name=\"directplay\">DirectPlay</string>\r\n    <string name=\"directshow\">DirectShow</string>\r\n    <string name=\"directx\">DirectX</string>\r\n    <string name=\"vcrun2010\">Visual C++ 2010</string>\r\n    <string name=\"wmdecoder\">Windows Media Decoder</string>\r\n    <string name=\"settings\">Settings</string>\r\n    <string name=\"exec_arguments\">Exec Arguments</string>\r\n    <string name=\"win_components\">Win Components</string>\r\n    <string name=\"drives\">Drives</string>\r\n    <string name=\"force_fullscreen\">Force Fullscreen</string>\r\n    <string name=\"range\">Range</string>\r\n    <string name=\"enable\">Enable</string>\r\n    <string name=\"disable\">Disable</string>\r\n    <string name=\"force\">Force</string>\r\n    <string name=\"installed_wine\">Installed Wine</string>\r\n    <string name=\"install_wine\">Install Wine</string>\r\n    <string name=\"arch\">Arch</string>\r\n    <string name=\"version\">Version</string>\r\n    <string name=\"unable_to_install_wine\">Unable to install Wine</string>\r\n    <string name=\"unable_to_remove_this_wine_version\">Unable to remove this wine version</string>\r\n    <string name=\"wine_version\">Wine Version</string>\r\n    <string name=\"removing_wine\">Removing Wine…</string>\r\n    <string name=\"preparing_installation\">Preparing installation…</string>\r\n    <string name=\"finishing_installation\">Finishing installation…</string>\r\n    <string name=\"storage_info\">Storage Info</string>\r\n    <string name=\"drive_c\">Drive C:</string>\r\n    <string name=\"cache\">Cache</string>\r\n    <string name=\"total\">Total</string>\r\n    <string name=\"clear_cache\">Clear Cache</string>\r\n    <string name=\"estimated_used_space\">Estimated Used Space</string>\r\n    <string name=\"advanced\">Advanced</string>\r\n    <string name=\"box86_box64\">Box86/Box64</string>\r\n    <string name=\"system\">System</string>\r\n    <string name=\"box86_preset\">Box86 Preset</string>\r\n    <string name=\"box64_preset\">Box64 Preset</string>\r\n    <string name=\"box86_version\">Box86 Version</string>\r\n    <string name=\"box64_version\">Box64 Version</string>\r\n    <string name=\"letter\">Letter</string>\r\n    <string name=\"target_path\">Target Path</string>\r\n    <string name=\"xserver\">XServer</string>\r\n    <string name=\"use_dri3_extension\">Use DRI3 extension</string>\r\n    <string name=\"width\">Width</string>\r\n    <string name=\"height\">Height</string>\r\n    <string name=\"old\">old</string>\r\n    <string name=\"_new\">new</string>\r\n    <string name=\"task_manager\">Task Manager</string>\r\n    <string name=\"process_name\">Process Name</string>\r\n    <string name=\"pid\">PID</string>\r\n    <string name=\"memory\">Memory</string>\r\n    <string name=\"end_process\">End Process</string>\r\n    <string name=\"new_task\">New Task</string>\r\n    <string name=\"processes\">Processes</string>\r\n    <string name=\"orientation\">Orientation</string>\r\n    <string name=\"horizontal\">Horizontal</string>\r\n    <string name=\"vertical\">Vertical</string>\r\n    <string name=\"open_file\">Open File</string>\r\n    <string name=\"download_file\">Download File</string>\r\n    <string name=\"do_you_want_to_download_the_selected_profiles\">Do you want to download the selected profiles?</string>\r\n    <string name=\"downloading_file\">Downloading File...</string>\r\n    <string name=\"unable_to_load_profile_list\">Unable to load profile list</string>\r\n    <string name=\"copy\">Copy</string>\r\n    <string name=\"installed_version\">Installed Version</string>\r\n    <string name=\"unable_to_download_file\">Unable to download file</string>\r\n    <string name=\"stability\">Stability</string>\r\n    <string name=\"compatibility\">Compatibility</string>\r\n    <string name=\"intermediate\">Intermediate</string>\r\n    <string name=\"performance\">Performance</string>\r\n    <string name=\"preset\">Preset</string>\r\n    <string name=\"you_cannot_remove_this_preset\">You cannot remove this preset</string>\r\n    <string name=\"dxwrapper_help_content\"><![CDATA[\r\n        <i><b>WineD3D</b></i> is a translation layer for DirectX 1-11 to OpenGL.<br /><br />\r\n        <i><b>DXVK</b></i> is a translation layer for Direct3D 9-11 to Vulkan.<br /><br />\r\n        <i><b>VKD3D</b></i> is a translation layer for Direct3D 12 API to Vulkan.<br /><br />\r\n        <i><b>CNC DDraw</b></i> is an implementation of DirectDraw for better compatibility with classic games.\r\n    ]]></string>\r\n    <string name=\"box86_64_env_var_help__dynarec_safeflags\"><![CDATA[\r\n        Handling of flags on CALL/RET opcodes<br /><br />\r\n        <b>0</b> : Treats CALL/RET as if it never needed flags (faster, unstable)<br />\r\n        <b>1</b> : Most RET will need flags, most CALLS will not<br />\r\n        <b>2</b> : All CALL/RET will need flags (slower)\r\n    ]]></string>\r\n    <string name=\"box86_64_env_var_help__dynarec_fastnan\">Generation of -NAN like on x86</string>\r\n    <string name=\"box86_64_env_var_help__dynarec_fastround\">Generation of precise x86 rounding</string>\r\n    <string name=\"box86_64_env_var_help__dynarec_x87double\">Use of Float/Double for x87 emulation</string>\r\n    <string name=\"box86_64_env_var_help__dynarec_bigblock\"><![CDATA[\r\n        Dynarec building BigBlock<br /><br />\r\n        <b>0</b> : Don\\'t try to build block as big as possible<br />\r\n        <b>1</b> : Build Dynarec block as big as possible<br />\r\n        <b>2</b> : Build Dynarec block bigger (continue when block overlaps, but only for blocks in elf memory)<br />\r\n        <b>3</b> : Build Dynarec block bigger (continue when block overlaps, for all types of memory)\r\n    ]]></string>\r\n    <string name=\"box86_64_env_var_help__dynarec_strongmem\"><![CDATA[\r\n        Simulation of Strong Memory model<br /><br />\r\n        <b>0</b> : Don\\'t try anything special<br />\r\n        <b>1</b> : Enable some Memory Barrier when writing to memory (on some MOV opcode)<br />\r\n        <b>2</b> : All 1 plus a Memory Barrier on every write to memory using MOV<br />\r\n        <b>3</b> : All 2 plus Memory Barrier when reading from memory and on some SSE/SSE2 opcodes\r\n    ]]></string>\r\n    <string name=\"box86_64_env_var_help__dynarec_forward\">Defines the max allowed forward value when building Block</string>\r\n    <string name=\"box86_64_env_var_help__dynarec_callret\">Optimization of CALL/RET opcodes</string>\r\n    <string name=\"box86_64_env_var_help__dynarec_wait\">Defines whether or not Dynarec will wait for the FillBlock to be ready</string>\r\n    <string name=\"box86_64_env_var_help__avx\"><![CDATA[\r\n        AVX and AVX2 implemented, along with BMI1, BMI2, ADX, FMA, F16C and RDANDR extension!<br /><br />\r\n        <b>0</b> : Disable AVX extension<br />\r\n        <b>1</b> : enable AVX, BMI1, F16C and VAES extension.<br />\r\n        <b>2</b> : All 1 plus enable AVX2, BMI2, FMA, ADX,VPCLMULQDQ and RDRAND.<br />\\\r\n    ]]></string>\r\n    <string name=\"box86_64_env_var_help__unityplayer\">Detect UnityPlayer.dll and apply strongmem settings</string>\r\n    <string name=\"columns\">Columns</string>\r\n    <string name=\"directinput_mapper_type\">DirectInput Mapper Type</string>\r\n    <string name=\"desktop\">Desktop</string>\r\n    <string name=\"theme\">Theme</string>\r\n    <string name=\"background\">Background</string>\r\n    <string name=\"max_device_memory\">Max Device Memory</string>\r\n    <string name=\"frame_rate\">Frame Rate</string>\r\n    <string name=\"configuration\">Configuration</string>\r\n    <string name=\"browse\">Browse</string>\r\n    <string name=\"magnifier\">Magnifier</string>\r\n    <string name=\"bring_to_front\">Bring to Front</string>\r\n    <string name=\"options\">Options</string>\r\n    <string name=\"enable_experimental_wow64_mode\">Enable experimental WoW64 mode</string>\r\n    <string name=\"logs\">Logs</string>\r\n    <string name=\"enable_wine_debug\">Enable Wine debug</string>\r\n    <string name=\"enable_box86_64_logs\">Enable Box86/Box64 logs</string>\r\n    <string name=\"export\">Export</string>\r\n    <string name=\"logs_exported_to\">Logs exported to</string>\r\n    <string name=\"general\">General</string>\r\n    <string name=\"msg_warning_install_wine\">Warning: Installing a new version of Wine is recommended for testing purposes only.</string>\r\n    <string name=\"startup_selection\">Startup Selection</string>\r\n    <string name=\"wine_debug_channel\">Wine Debug Channel</string>\r\n    <string name=\"game_controller\">Game Controller</string>\r\n    <string name=\"as_button\">As Button</string>\r\n    <string name=\"as_axis\">As Axis</string>\r\n    <string name=\"both\">Both</string>\r\n    <string name=\"trigger_mode\">Trigger Mode</string>\r\n    <string name=\"use_glibc\">Use Glibc instead of Proot</string>\r\n    <string name=\"experimental\">Experimental</string>\r\n    <string name=\"glibc_exp_edition\">Glibc Experimental Edition</string>\r\n    <string name=\"enabled_async\">Enable Async</string>\r\n    <string name=\"enabled_async_cache\">Enable Async Cache</string>\r\n    <string name=\"vkd3d_feature_level\">VKD3D Feature Level</string>\r\n    <string name=\"box64_rc_file\">Box64 RCFile</string>\r\n    <string name=\"filter\">Filter</string>\r\n    <string name=\"all\">All</string>\r\n    <string name=\"group\">Group</string>\r\n    <string name=\"new_group\">New Group</string>\r\n    <string name=\"import_group\">Import Group</string>\r\n    <string name=\"new_file\">New File</string>\r\n    <string name=\"new_item\">New Item</string>\r\n    <string name=\"group_edit\">Group Edit</string>\r\n    <string name=\"group_name\">Group Name</string>\r\n    <string name=\"do_you_want_to_duplicate_this_group\">Do you want to duplicate this group?</string>\r\n    <string name=\"do_you_want_to_remove_this_group\">Do you want to remove this group?</string>\r\n    <string name=\"do_you_want_to_duplicate_this_process\">Do you want to duplicate this process?</string>\r\n    <string name=\"do_you_want_to_remove_this_process\">Do you want to remove this process?</string>\r\n    <string name=\"do_you_want_to_remove_this_variable\">Do you want to remove this variable?</string>\r\n    <string name=\"variable_name\">Variable Name</string>\r\n    <string name=\"variable_already_exists\">Variable already exists</string>\r\n    <string name=\"cannot_remove_default_profile\">Cannot remove default profile.</string>\r\n    <string name=\"cannot_edit_default_profile\">Cannot edit default profile.</string>\r\n    <string name=\"do_you_want_to_restore_default_profile\">Do you want to restore default profile?</string>\r\n    <string name=\"box86_64_rc_files\">RC File</string>\r\n    <string name=\"simulate_touch_screen\">Simulate touch screen</string>\r\n    <string name=\"install_content\">Install Content</string>\r\n    <string name=\"content_type\">Content Type</string>\r\n    <string name=\"contents\">Contents</string>\r\n    <string name=\"do_you_want_to_install_content\">Do you want to install additional content?</string>\r\n    <string name=\"pls_make_sure_content_trustworthy\">Contents contain executable files. Unsafe executable files may compromise your data or device security. Before installing, PLEASE make sure that the additional content you are installing is trustworthy.</string>\r\n    <string name=\"content_suffix_is_wcp_packed_xz_zst\">The content files have the .wcp extension and are compressed using either xz or zst formats.</string>\r\n    <string name=\"installing_content\">Installing Content…</string>\r\n    <string name=\"unable_to_install_content\">Unable to install content.</string>\r\n    <string name=\"install_failed\">Install Failed</string>\r\n    <string name=\"file_cannot_be_recognied\">File cannot be recognized.</string>\r\n    <string name=\"profile_not_found_in_content\">Profile not found in content.</string>\r\n    <string name=\"profile_cannot_be_recognized\">Profile cannot be recognized</string>\r\n    <string name=\"content_already_exist\">The content you\\'re trying to install already exists.</string>\r\n    <string name=\"content_info\">Content Info</string>\r\n    <string name=\"version_code\">Version Code</string>\r\n    <string name=\"description\">Description</string>\r\n    <string name=\"file_list\">File List</string>\r\n    <string name=\"_continue\">Continue</string>\r\n    <string name=\"content_installed_success\">Content installed successfully!</string>\r\n    <string name=\"content_cannot_be_trusted\">Content cannot be trusted.</string>\r\n    <string name=\"content_is_incomplete\">Content is incomplete.</string>\r\n    <string name=\"warning_content_has_untrusted_files\">Warning: The additional content contains untrusted files. Generally, the following files should not be modified. Please decide whether to proceed with the installation.</string>\r\n    <string name=\"warning\">Warning</string>\r\n    <string name=\"do_you_want_to_remove_this_content\">Do you want to remove this content?</string>\r\n    <string name=\"add_to_home_screen\">Add to Home Screen</string>\r\n    <string name=\"shortcut_not_available\">This shortcut is no longer available. Please delete or recreate it.</string>\r\n    <string name=\"enable_file_provider\">Enable File Provider</string>\r\n    <string name=\"take_effect_next_startup\">This option will take effect at the next startup.</string>\r\n    <string name=\"imagefs\">Imagefs</string>\r\n    <string name=\"reinstall_imagefs\">Reinstall Imagefs</string>\r\n    <string name=\"do_you_want_to_reinstall_imagefs\">Do you want to reinstall imagefs? This operation will restore system files, your containers won\\'t be changed.</string>\r\n    <string name=\"unable_to_remove_content_since_container_using\">Unable to remove this content, because a container is currently using this Wine.</string>\r\n    <string name=\"get_more_contents_form_github\">You can access https://github.com/longjunyu2/winlator/releases to get more contents.</string>\r\n    <string name=\"setup_failed\">Setup failed</string>\r\n    <string name=\"graphics_driver_configuration\">Graphics Driver Configuration</string>\r\n    <string name=\"select_graphics_driver_version\">Select Graphics Driver Version:</string>\r\n    <string name=\"graphics_driver_version\">Graphics Driver Version:</string>\r\n    <string name=\"add_to_homescreen\">Add to Homescreen</string>\r\n    <string name=\"add_save\">Add Save</string>\r\n    <string name=\"saves\">Saves</string>\r\n    <string name=\"import_save\">Import Save</string>\r\n    <string name=\"transfer\">Transfer</string>\r\n    <string name=\"share\">Share</string>\r\n    <string name=\"unregister\">Unregister</string>\r\n    <string name=\"no_saves_to_display\">No saves to display</string>\r\n    <string name=\"new_save\">Register a Save</string>\r\n    <string name=\"save_path\">Save Path</string>\r\n    <string name=\"save_title\">Save Name</string>\r\n    <string name=\"save_container\">Selected Container</string>\r\n    <string name=\"select_save_path\">Locate Save Folder</string>\r\n    <string name=\"select_container_first\">Please select the container containing your save.</string>\r\n    <string name=\"fill_all_fields\">Path and Save Name are required</string>\r\n    <string name=\"invalid_path\">Not a valid save directory path</string>\r\n    <string name=\"confirm_selection\">Confirm Selection</string>\r\n    <string name=\"select_directory\">Select your save directory</string>\r\n    <string name=\"invalid_container\">Invalid Path</string>\r\n    <string name=\"up_directory\">Up Directory</string>\r\n    <string name=\"edit_save_title\">Update Save title</string>\r\n    <string name=\"edit_save\">Save edit</string>\r\n    <string name=\"original_save_path\">Registered save path</string>\r\n    <string name=\"updated_save_path\">Updated save path</string>\r\n    <string name=\"confirmation\">Confirmation</string>\r\n    <string name=\"yes\">Yes</string>\r\n    <string name=\"no\">No</string>\r\n    <string name=\"path_not_changed_prompt\">The path has not been changed. Do you want to continue?</string>\r\n    <string name=\"save_transfer\">Transfer Save</string>\r\n    <string name=\"select_container\">Target Container:</string>\r\n    <string name=\"transfer_complete\">Transfer complete</string>\r\n    <string name=\"transfer_failed\">Transfer failed</string>\r\n    <string name=\"unable_to_transfer_save\">Unable to transfer save</string>\r\n    <string name=\"spinner_container_selection\">Transferring...</string>\r\n    <string name=\"name_required\">Name is required</string>\r\n    <string name=\"exporting_save\">Exporting save...</string>\r\n    <string name=\"importing_save\">Importing save...</string>\r\n\r\n\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/res/values/strings.xml b/src/main/res/values/strings.xml
--- a/src/main/res/values/strings.xml	
+++ b/src/main/res/values/strings.xml	
@@ -97,16 +97,16 @@
     <string name="press_any_button_on_your_controller">Press any button on your controller</string>
     <string name="bindings">bindings</string>
     <string name="show_touchscreen_controls">Show Touchscreen Controls</string>
-    <string name="dxwrapper">DX Wrapper</string>
+    <string name="dxwrapper" translatable="false">DX Wrapper</string>
     <string name="mouse_warp_override">Mouse Warp Override</string>
-    <string name="direct3d">Direct3D</string>
-    <string name="directsound">DirectSound</string>
-    <string name="directmusic">DirectMusic</string>
-    <string name="directplay">DirectPlay</string>
-    <string name="directshow">DirectShow</string>
-    <string name="directx">DirectX</string>
-    <string name="vcrun2010">Visual C++ 2010</string>
-    <string name="wmdecoder">Windows Media Decoder</string>
+    <string name="direct3d" translatable="false">Direct3D</string>
+    <string name="directsound" translatable="false">DirectSound</string>
+    <string name="directmusic" translatable="false">DirectMusic</string>
+    <string name="directplay" translatable="false">DirectPlay</string>
+    <string name="directshow" translatable="false">DirectShow</string>
+    <string name="directx" translatable="false">DirectX</string>
+    <string name="vcrun2010" translatable="false">Visual C++ 2010</string>
+    <string name="wmdecoder" translatable="false">Windows Media Decoder</string>
     <string name="settings">Settings</string>
     <string name="exec_arguments">Exec Arguments</string>
     <string name="win_components">Win Components</string>
@@ -118,7 +118,7 @@
     <string name="force">Force</string>
     <string name="installed_wine">Installed Wine</string>
     <string name="install_wine">Install Wine</string>
-    <string name="arch">Arch</string>
+    <string name="arch" translatable="false">Arch</string>
     <string name="version">Version</string>
     <string name="unable_to_install_wine">Unable to install Wine</string>
     <string name="unable_to_remove_this_wine_version">Unable to remove this wine version</string>
@@ -133,7 +133,7 @@
     <string name="clear_cache">Clear Cache</string>
     <string name="estimated_used_space">Estimated Used Space</string>
     <string name="advanced">Advanced</string>
-    <string name="box86_box64">Box86/Box64</string>
+    <string name="box86_box64" translatable="false">Box86/Box64</string>
     <string name="system">System</string>
     <string name="box86_preset">Box86 Preset</string>
     <string name="box64_preset">Box64 Preset</string>
@@ -141,7 +141,7 @@
     <string name="box64_version">Box64 Version</string>
     <string name="letter">Letter</string>
     <string name="target_path">Target Path</string>
-    <string name="xserver">XServer</string>
+    <string name="xserver" translatable="false">XServer</string>
     <string name="use_dri3_extension">Use DRI3 extension</string>
     <string name="width">Width</string>
     <string name="height">Height</string>
@@ -162,7 +162,7 @@
     <string name="do_you_want_to_download_the_selected_profiles">Do you want to download the selected profiles?</string>
     <string name="downloading_file">Downloading File...</string>
     <string name="unable_to_load_profile_list">Unable to load profile list</string>
-    <string name="copy">Copy</string>
+    <string name="copy" translatable="false">Copy</string>
     <string name="installed_version">Installed Version</string>
     <string name="unable_to_download_file">Unable to download file</string>
     <string name="stability">Stability</string>
@@ -171,45 +171,45 @@
     <string name="performance">Performance</string>
     <string name="preset">Preset</string>
     <string name="you_cannot_remove_this_preset">You cannot remove this preset</string>
-    <string name="dxwrapper_help_content"><![CDATA[
+    <string name="dxwrapper_help_content" translatable="false"><![CDATA[
         <i><b>WineD3D</b></i> is a translation layer for DirectX 1-11 to OpenGL.<br /><br />
         <i><b>DXVK</b></i> is a translation layer for Direct3D 9-11 to Vulkan.<br /><br />
         <i><b>VKD3D</b></i> is a translation layer for Direct3D 12 API to Vulkan.<br /><br />
         <i><b>CNC DDraw</b></i> is an implementation of DirectDraw for better compatibility with classic games.
     ]]></string>
-    <string name="box86_64_env_var_help__dynarec_safeflags"><![CDATA[
+    <string name="box86_64_env_var_help__dynarec_safeflags" translatable="false"><![CDATA[
         Handling of flags on CALL/RET opcodes<br /><br />
         <b>0</b> : Treats CALL/RET as if it never needed flags (faster, unstable)<br />
         <b>1</b> : Most RET will need flags, most CALLS will not<br />
         <b>2</b> : All CALL/RET will need flags (slower)
     ]]></string>
-    <string name="box86_64_env_var_help__dynarec_fastnan">Generation of -NAN like on x86</string>
-    <string name="box86_64_env_var_help__dynarec_fastround">Generation of precise x86 rounding</string>
-    <string name="box86_64_env_var_help__dynarec_x87double">Use of Float/Double for x87 emulation</string>
-    <string name="box86_64_env_var_help__dynarec_bigblock"><![CDATA[
+    <string name="box86_64_env_var_help__dynarec_fastnan" translatable="false">Generation of -NAN like on x86</string>
+    <string name="box86_64_env_var_help__dynarec_fastround" translatable="false">Generation of precise x86 rounding</string>
+    <string name="box86_64_env_var_help__dynarec_x87double" translatable="false">Use of Float/Double for x87 emulation</string>
+    <string name="box86_64_env_var_help__dynarec_bigblock" translatable="false"><![CDATA[
         Dynarec building BigBlock<br /><br />
         <b>0</b> : Don\'t try to build block as big as possible<br />
         <b>1</b> : Build Dynarec block as big as possible<br />
         <b>2</b> : Build Dynarec block bigger (continue when block overlaps, but only for blocks in elf memory)<br />
         <b>3</b> : Build Dynarec block bigger (continue when block overlaps, for all types of memory)
     ]]></string>
-    <string name="box86_64_env_var_help__dynarec_strongmem"><![CDATA[
+    <string name="box86_64_env_var_help__dynarec_strongmem" translatable="false"><![CDATA[
         Simulation of Strong Memory model<br /><br />
         <b>0</b> : Don\'t try anything special<br />
         <b>1</b> : Enable some Memory Barrier when writing to memory (on some MOV opcode)<br />
         <b>2</b> : All 1 plus a Memory Barrier on every write to memory using MOV<br />
         <b>3</b> : All 2 plus Memory Barrier when reading from memory and on some SSE/SSE2 opcodes
     ]]></string>
-    <string name="box86_64_env_var_help__dynarec_forward">Defines the max allowed forward value when building Block</string>
-    <string name="box86_64_env_var_help__dynarec_callret">Optimization of CALL/RET opcodes</string>
-    <string name="box86_64_env_var_help__dynarec_wait">Defines whether or not Dynarec will wait for the FillBlock to be ready</string>
-    <string name="box86_64_env_var_help__avx"><![CDATA[
+    <string name="box86_64_env_var_help__dynarec_forward" translatable="false">Defines the max allowed forward value when building Block</string>
+    <string name="box86_64_env_var_help__dynarec_callret" translatable="false">Optimization of CALL/RET opcodes</string>
+    <string name="box86_64_env_var_help__dynarec_wait" translatable="false">Defines whether or not Dynarec will wait for the FillBlock to be ready</string>
+    <string name="box86_64_env_var_help__avx" translatable="false"><![CDATA[
         AVX and AVX2 implemented, along with BMI1, BMI2, ADX, FMA, F16C and RDANDR extension!<br /><br />
         <b>0</b> : Disable AVX extension<br />
         <b>1</b> : enable AVX, BMI1, F16C and VAES extension.<br />
         <b>2</b> : All 1 plus enable AVX2, BMI2, FMA, ADX,VPCLMULQDQ and RDRAND.<br />\
     ]]></string>
-    <string name="box86_64_env_var_help__unityplayer">Detect UnityPlayer.dll and apply strongmem settings</string>
+    <string name="box86_64_env_var_help__unityplayer" translatable="false">Detect UnityPlayer.dll and apply strongmem settings</string>
     <string name="columns">Columns</string>
     <string name="directinput_mapper_type">DirectInput Mapper Type</string>
     <string name="desktop">Desktop</string>
@@ -298,47 +298,48 @@
     <string name="do_you_want_to_reinstall_imagefs">Do you want to reinstall imagefs? This operation will restore system files, your containers won\'t be changed.</string>
     <string name="unable_to_remove_content_since_container_using">Unable to remove this content, because a container is currently using this Wine.</string>
     <string name="get_more_contents_form_github">You can access https://github.com/longjunyu2/winlator/releases to get more contents.</string>
-    <string name="setup_failed">Setup failed</string>
-    <string name="graphics_driver_configuration">Graphics Driver Configuration</string>
-    <string name="select_graphics_driver_version">Select Graphics Driver Version:</string>
-    <string name="graphics_driver_version">Graphics Driver Version:</string>
-    <string name="add_to_homescreen">Add to Homescreen</string>
-    <string name="add_save">Add Save</string>
-    <string name="saves">Saves</string>
-    <string name="import_save">Import Save</string>
-    <string name="transfer">Transfer</string>
-    <string name="share">Share</string>
-    <string name="unregister">Unregister</string>
-    <string name="no_saves_to_display">No saves to display</string>
-    <string name="new_save">Register a Save</string>
-    <string name="save_path">Save Path</string>
-    <string name="save_title">Save Name</string>
-    <string name="save_container">Selected Container</string>
-    <string name="select_save_path">Locate Save Folder</string>
-    <string name="select_container_first">Please select the container containing your save.</string>
-    <string name="fill_all_fields">Path and Save Name are required</string>
-    <string name="invalid_path">Not a valid save directory path</string>
-    <string name="confirm_selection">Confirm Selection</string>
-    <string name="select_directory">Select your save directory</string>
-    <string name="invalid_container">Invalid Path</string>
-    <string name="up_directory">Up Directory</string>
-    <string name="edit_save_title">Update Save title</string>
-    <string name="edit_save">Save edit</string>
-    <string name="original_save_path">Registered save path</string>
-    <string name="updated_save_path">Updated save path</string>
-    <string name="confirmation">Confirmation</string>
-    <string name="yes">Yes</string>
-    <string name="no">No</string>
-    <string name="path_not_changed_prompt">The path has not been changed. Do you want to continue?</string>
-    <string name="save_transfer">Transfer Save</string>
-    <string name="select_container">Target Container:</string>
-    <string name="transfer_complete">Transfer complete</string>
-    <string name="transfer_failed">Transfer failed</string>
-    <string name="unable_to_transfer_save">Unable to transfer save</string>
-    <string name="spinner_container_selection">Transferring...</string>
-    <string name="name_required">Name is required</string>
-    <string name="exporting_save">Exporting save...</string>
-    <string name="importing_save">Importing save...</string>
+    <string name="setup_failed" translatable="false">Setup failed</string>
+    <string name="graphics_driver_configuration" translatable="false">Graphics Driver Configuration</string>
+    <string name="select_graphics_driver_version" translatable="false">Select Graphics Driver Version:</string>
+    <string name="graphics_driver_version" translatable="false">Graphics Driver Version:</string>
+    <string name="add_to_homescreen" translatable="false">Add to Homescreen</string>
+    <string name="add_save" translatable="false">Add Save</string>
+    <string name="saves" translatable="false">Saves</string>
+    <string name="import_save" translatable="false">Import Save</string>
+    <string name="transfer" translatable="false">Transfer</string>
+    <string name="share" translatable="false">Share</string>
+    <string name="unregister" translatable="false">Unregister</string>
+    <string name="no_saves_to_display" translatable="false">No saves to display</string>
+    <string name="new_save" translatable="false">Register a Save</string>
+    <string name="save_path" translatable="false">Save Path</string>
+    <string name="save_title" translatable="false">Save Name</string>
+    <string name="save_container" translatable="false">Selected Container</string>
+    <string name="select_save_path" translatable="false">Locate Save Folder</string>
+    <string name="select_container_first" translatable="false">Please select the container containing your save.</string>
+    <string name="fill_all_fields" translatable="false">Path and Save Name are required</string>
+    <string name="invalid_path" translatable="false">Not a valid save directory path</string>
+    <string name="confirm_selection" translatable="false">Confirm Selection</string>
+    <string name="select_directory" translatable="false">Select your save directory</string>
+    <string name="invalid_container" translatable="false">Invalid Path</string>
+    <string name="up_directory" translatable="false">Up Directory</string>
+    <string name="edit_save_title" translatable="false">Update Save title</string>
+    <string name="edit_save" translatable="false">Save edit</string>
+    <string name="original_save_path" translatable="false">Registered save path</string>
+    <string name="updated_save_path" translatable="false">Updated save path</string>
+    <string name="confirmation" translatable="false">Confirmation</string>
+    <string name="yes" translatable="false">Yes</string>
+    <string name="no" translatable="false">No</string>
+    <string name="path_not_changed_prompt" translatable="false">The path has not been changed. Do you want to continue?</string>
+    <string name="save_transfer" translatable="false">Transfer Save</string>
+    <string name="select_container" translatable="false">Target Container:</string>
+    <string name="transfer_complete" translatable="false">Transfer complete</string>
+    <string name="transfer_failed" translatable="false">Transfer failed</string>
+    <string name="unable_to_transfer_save" translatable="false">Unable to transfer save</string>
+    <string name="spinner_container_selection" translatable="false">Transferring...</string>
+    <string name="name_required" translatable="false">Name is required</string>
+    <string name="exporting_save" translatable="false">Exporting save...</string>
+    <string name="importing_save" translatable="false">Importing save...</string>
+    <string name="_copy">Copy</string>
 
 
 </resources>
\ No newline at end of file
Index: src/main/java/com/winlator/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.winlator;\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageInfo;\r\nimport android.content.pm.PackageManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.Settings;\r\nimport android.text.Html;\r\nimport android.text.method.LinkMovementMethod;\r\nimport android.util.Log;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.IntRange;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.winlator.contentdialog.ContentDialog;\r\nimport com.winlator.contentdialog.SaveEditDialog;\r\nimport com.winlator.contentdialog.SaveSettingsDialog;\r\nimport com.winlator.core.Callback;\r\nimport com.winlator.core.PreloaderDialog;\r\nimport com.winlator.container.ContainerManager;\r\nimport com.winlator.saves.CustomFilePickerActivity;\r\nimport com.winlator.saves.Save;\r\nimport com.winlator.saves.SaveManager;\r\nimport com.winlator.xenvironment.ImageFsInstaller;\r\n\r\nimport java.util.List;\r\n\r\npublic class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {\r\n    public static final @IntRange(from = 1, to = 19) byte CONTAINER_PATTERN_COMPRESSION_LEVEL = 9;\r\n    public static final byte PERMISSION_WRITE_EXTERNAL_STORAGE_REQUEST_CODE = 1;\r\n    public static final byte OPEN_FILE_REQUEST_CODE = 2;\r\n    public static final byte EDIT_INPUT_CONTROLS_REQUEST_CODE = 3;\r\n    public static final byte OPEN_DIRECTORY_REQUEST_CODE = 4;\r\n    private DrawerLayout drawerLayout;\r\n    public final PreloaderDialog preloaderDialog = new PreloaderDialog(this);\r\n    private boolean editInputControls = false;\r\n    private int selectedProfileId;\r\n    private Callback<Uri> openFileCallback;\r\n    private SharedPreferences sharedPreferences;\r\n\r\n    // Add SaveSettingsDialog and SaveEditDialog instances\r\n    private SaveSettingsDialog saveSettingsDialog;\r\n    private SaveEditDialog saveEditDialog;\r\n    private SaveManager saveManager;\r\n    private ContainerManager containerManager;\r\n\r\n    private SaveEditDialog currentSaveEditDialog;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.main_activity);\r\n\r\n        drawerLayout = findViewById(R.id.DrawerLayout);\r\n        NavigationView navigationView = findViewById(R.id.NavigationView);\r\n        navigationView.setNavigationItemSelectedListener(this);\r\n\r\n        setSupportActionBar(findViewById(R.id.Toolbar));\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if (actionBar != null) {\r\n            actionBar.setDisplayHomeAsUpEnabled(true);\r\n            actionBar.setHomeAsUpIndicator(R.drawable.icon_action_bar_menu);\r\n        }\r\n\r\n        // Initialize SaveManager and ContainerManager\r\n        saveManager = new SaveManager(this);\r\n        containerManager = new ContainerManager(this);\r\n\r\n        Intent intent = getIntent();\r\n        editInputControls = intent.getBooleanExtra(\"edit_input_controls\", false);\r\n        if (editInputControls) {\r\n            selectedProfileId = intent.getIntExtra(\"selected_profile_id\", 0);\r\n            actionBar.setHomeAsUpIndicator(R.drawable.icon_action_bar_back);\r\n            onNavigationItemSelected(navigationView.getMenu().findItem(R.id.main_menu_input_controls));\r\n            navigationView.setCheckedItem(R.id.main_menu_input_controls);\r\n        } else {\r\n            int selectedMenuItemId = intent.getIntExtra(\"selected_menu_item_id\", 0);\r\n            int menuItemId = selectedMenuItemId > 0 ? selectedMenuItemId : R.id.main_menu_containers;\r\n\r\n            actionBar.setHomeAsUpIndicator(R.drawable.icon_action_bar_menu);\r\n            onNavigationItemSelected(navigationView.getMenu().findItem(menuItemId));\r\n            navigationView.setCheckedItem(menuItemId);\r\n\r\n            if (!requestAppPermissions()) {\r\n                ImageFsInstaller.installIfNeeded(this);\r\n            }\r\n\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R && !Environment.isExternalStorageManager()) {\r\n                showAllFilesAccessDialog();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void showAllFilesAccessDialog() {\r\n        new AlertDialog.Builder(this)\r\n                .setTitle(\"All Files Access Required\")\r\n                .setMessage(\"In order to grant access to additional storage devices such as USB storage device, the All Files Access permission must be granted. Press Okay to grant All Files Access in your Android Settings.\")\r\n                .setPositiveButton(\"Okay\", (dialog, which) -> {\r\n                    Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);\r\n                    intent.setData(Uri.parse(\"package:\" + getPackageName()));\r\n                    startActivity(intent);\r\n                })\r\n                .setNegativeButton(\"Cancel\", null)\r\n                .show();\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == PERMISSION_WRITE_EXTERNAL_STORAGE_REQUEST_CODE) {\r\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                ImageFsInstaller.installIfNeeded(this);\r\n            }\r\n            else finish();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        Log.d(\"WinActivity\", \"onActivityResult called with requestCode: \" + requestCode + \" and resultCode: \" + resultCode);\r\n\r\n        if (saveSettingsDialog != null && saveSettingsDialog.isShowing()) {\r\n            Log.d(\"WinActivity\", \"Forwarding result to SaveSettingsDialog\");\r\n            saveSettingsDialog.onActivityResult(requestCode, resultCode, data);\r\n        } else if (saveEditDialog != null && saveEditDialog.isShowing()) {\r\n            Log.d(\"WinActivity\", \"Forwarding result to SaveEditDialog\");\r\n            saveEditDialog.onActivityResult(requestCode, resultCode, data);\r\n        } else {\r\n            Log.d(\"WinActivity\", \"No dialog found for request code: \" + requestCode);\r\n        }\r\n    }\r\n\r\n    private void showSavesFragment() {\r\n        SavesFragment fragment = new SavesFragment();\r\n        getSupportFragmentManager().beginTransaction()\r\n                .replace(R.id.FLFragmentContainer, fragment)\r\n                .commit();\r\n    }\r\n\r\n    // Method to show SaveEditDialog\r\n    public void showSaveEditDialog(Save saveToEdit) {\r\n        saveEditDialog = new SaveEditDialog(this, saveManager, containerManager, saveToEdit);\r\n        saveEditDialog.show();\r\n    }\r\n\r\n    public void onSaveAdded() {\r\n        Fragment currentFragment = getSupportFragmentManager().findFragmentById(R.id.FLFragmentContainer);\r\n        if (currentFragment instanceof SavesFragment) {\r\n            ((SavesFragment) currentFragment).refreshSavesList();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        FragmentManager fragmentManager = getSupportFragmentManager();\r\n        List<Fragment> fragments = fragmentManager.getFragments();\r\n        for (Fragment fragment : fragments) {\r\n            if (fragment instanceof ContainersFragment && fragment.isVisible()) {\r\n                finish();\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (fragmentManager.getBackStackEntryCount() > 0)\r\n            fragmentManager.popBackStack();\r\n        else\r\n            show(new ContainersFragment());\r\n    }\r\n\r\n    public void setOpenFileCallback(Callback<Uri> openFileCallback) {\r\n        this.openFileCallback = openFileCallback;\r\n    }\r\n\r\n    private boolean requestAppPermissions() {\r\n        boolean hasWritePermission = ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;\r\n        boolean hasReadPermission = ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;\r\n        boolean hasManageStoragePermission = Build.VERSION.SDK_INT < Build.VERSION_CODES.R || Environment.isExternalStorageManager();\r\n\r\n        if (hasWritePermission && hasReadPermission && hasManageStoragePermission) {\r\n            return false; // All permissions are granted\r\n        }\r\n\r\n        if (!hasWritePermission || !hasReadPermission) {\r\n            String[] permissions = new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE};\r\n            ActivityCompat.requestPermissions(this, permissions, PERMISSION_WRITE_EXTERNAL_STORAGE_REQUEST_CODE);\r\n        }\r\n\r\n        return true; // Permissions are still being requested\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem menuItem) {\r\n        if (menuItem.getItemId() == android.R.id.home) {\r\n            // Toggle the drawer\r\n            if (drawerLayout.isDrawerOpen(GravityCompat.START)) {\r\n                drawerLayout.closeDrawer(GravityCompat.START);\r\n            } else {\r\n                drawerLayout.openDrawer(GravityCompat.START);\r\n            }\r\n            return true;\r\n        } else if (menuItem.getItemId() == R.id.saves_menu_add) {\r\n            // Check if we are editing a save\r\n            Intent intent = getIntent();\r\n            int editSaveId = intent.getIntExtra(\"edit_save_id\", -1);\r\n            Save saveToEdit = editSaveId >= 0 ? saveManager.getSaveById(editSaveId) : null;\r\n\r\n            // Create and show SaveEditDialog or SaveSettingsDialog as appropriate\r\n            if (saveToEdit != null) {\r\n                // Ensure previous dialog is dismissed before showing a new one\r\n                if (saveEditDialog != null && saveEditDialog.isShowing()) {\r\n                    saveEditDialog.dismiss();\r\n                }\r\n                showSaveEditDialog(saveToEdit); // Use the correct method to show SaveEditDialog\r\n            } else {\r\n                saveSettingsDialog = new SaveSettingsDialog(this, saveManager, containerManager);\r\n                saveSettingsDialog.show();\r\n            }\r\n            return true;\r\n        } else {\r\n            return super.onOptionsItemSelected(menuItem);\r\n        }\r\n    }\r\n\r\n    public void toggleDrawer() {\r\n        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {\r\n            drawerLayout.closeDrawer(GravityCompat.START);\r\n        } else {\r\n            drawerLayout.openDrawer(GravityCompat.START);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n        FragmentManager fragmentManager = getSupportFragmentManager();\r\n        if (fragmentManager.getBackStackEntryCount() > 0) {\r\n            fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);\r\n        }\r\n\r\n        switch (item.getItemId()) {\r\n            case R.id.main_menu_shortcuts:\r\n                show(new ShortcutsFragment());\r\n                break;\r\n            case R.id.main_menu_containers:\r\n                show(new ContainersFragment());\r\n                break;\r\n            case R.id.main_menu_input_controls:\r\n                show(new InputControlsFragment(selectedProfileId));\r\n                break;\r\n            case R.id.main_menu_box_rc:\r\n                show(new Box86_64RCFragment());\r\n                break;\r\n            case R.id.main_menu_contents:\r\n                show(new ContentsFragment());\r\n                break;\r\n            case R.id.main_menu_saves:\r\n                show(new SavesFragment());\r\n                break;\r\n            case R.id.main_menu_settings:\r\n                show(new SettingsFragment());\r\n                break;\r\n            case R.id.main_menu_about:\r\n                showAboutDialog();\r\n                break;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void show(Fragment fragment) {\r\n        FragmentManager fragmentManager = getSupportFragmentManager();\r\n        fragmentManager.beginTransaction()\r\n                .replace(R.id.FLFragmentContainer, fragment)\r\n                .commit();\r\n\r\n        drawerLayout.closeDrawer(GravityCompat.START);\r\n    }\r\n\r\n    private void showAboutDialog() {\r\n        ContentDialog dialog = new ContentDialog(this, R.layout.about_dialog);\r\n        dialog.findViewById(R.id.LLBottomBar).setVisibility(View.GONE);\r\n\r\n        try {\r\n            final PackageInfo pInfo = getPackageManager().getPackageInfo(getPackageName(), 0);\r\n\r\n            TextView tvWebpage = dialog.findViewById(R.id.TVWebpage);\r\n            tvWebpage.setText(Html.fromHtml(\"<a href=\\\"https://www.winlator.org\\\">winlator.org</a>\", Html.FROM_HTML_MODE_LEGACY));\r\n            tvWebpage.setMovementMethod(LinkMovementMethod.getInstance());\r\n\r\n            ((TextView) dialog.findViewById(R.id.TVAppVersion)).setText(getString(R.string.version) + \" \" + pInfo.versionName);\r\n\r\n            String creditsAndThirdPartyAppsHTML = String.join(\"<br />\",\r\n                    \"Ubuntu RootFs (<a href=\\\"https://releases.ubuntu.com/focal\\\">Focal Fossa</a>)\",\r\n                    \"Wine (<a href=\\\"https://www.winehq.org\\\">winehq.org</a>)\",\r\n                    \"Box86/Box64 by <a href=\\\"https://github.com/ptitSeb\\\">ptitseb</a>\",\r\n                    \"PRoot (<a href=\\\"https://proot-me.github.io\\\">proot-me.github.io</a>)\",\r\n                    \"Mesa (Turnip/Zink/VirGL) (<a href=\\\"https://www.mesa3d.org\\\">mesa3d.org</a>)\",\r\n                    \"DXVK (<a href=\\\"https://github.com/doitsujin/dxvk\\\">github.com/doitsujin/dxvk</a>)\",\r\n                    \"VKD3D (<a href=\\\"https://gitlab.winehq.org/wine/vkd3d\\\">gitlab.winehq.org/wine/vkd3d</a>)\",\r\n                    \"D8VK (<a href=\\\"https://github.com/AlpyneDreams/d8vk\\\">github.com/AlpyneDreams/d8vk</a>)\",\r\n                    \"CNC DDraw (<a href=\\\"https://github.com/FunkyFr3sh/cnc-ddraw\\\">github.com/FunkyFr3sh/cnc-ddraw</a>)\"\r\n            );\r\n\r\n            TextView tvCreditsAndThirdPartyApps = dialog.findViewById(R.id.TVCreditsAndThirdPartyApps);\r\n            tvCreditsAndThirdPartyApps.setText(Html.fromHtml(creditsAndThirdPartyAppsHTML, Html.FROM_HTML_MODE_LEGACY));\r\n            tvCreditsAndThirdPartyApps.setMovementMethod(LinkMovementMethod.getInstance());\r\n\r\n            String glibcExpVersionForkHTML = String.join(\"<br />\",\r\n                    \"longjunyu2's <a href=\\\"https://github.com/longjunyu2/winlator/tree/use-glibc-instead-of-proot\\\">(Fork)</a> + cmod by coffincolors\");\r\n            TextView tvGlibcExpVersionFork = dialog.findViewById(R.id.TVGlibcExpVersionFork);\r\n            tvGlibcExpVersionFork.setText(Html.fromHtml(glibcExpVersionForkHTML, Html.FROM_HTML_MODE_LEGACY));\r\n            tvGlibcExpVersionFork.setMovementMethod(LinkMovementMethod.getInstance());\r\n        } catch (PackageManager.NameNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n        catch (PackageManager.NameNotFoundException e) {}\r\n\r\n        dialog.show();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/winlator/MainActivity.java b/src/main/java/com/winlator/MainActivity.java
--- a/src/main/java/com/winlator/MainActivity.java	
+++ b/src/main/java/com/winlator/MainActivity.java	
@@ -334,7 +334,7 @@
         } catch (PackageManager.NameNotFoundException e) {
             e.printStackTrace();
         }
-        catch (PackageManager.NameNotFoundException e) {}
+
 
         dialog.show();
     }
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>buildscript {\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:8.1.2'\r\n    }\r\n}\r\n\r\napply plugin: 'com.android.application'\r\nplugins {\r\n    alias(libs.plugins.android.application)\r\n}\r\n\r\nandroid {\r\n    compileSdk 30\r\n\r\n    defaultConfig {\r\n        applicationId 'com.winlator'\r\n        minSdkVersion 26\r\n        targetSdkVersion 28\r\n        versionCode 18\r\n        versionName \"7.1.2-glibc\"\r\n    }\r\n\r\n    buildTypes {\r\n        debug {\r\n            minifyEnabled false\r\n            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    lintOptions {\r\n        checkReleaseBuilds false\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_17\r\n        targetCompatibility JavaVersion.VERSION_17\r\n    }\r\n\r\n    externalNativeBuild {\r\n        cmake {\r\n            version '3.22.1'\r\n            path 'src/main/cpp/CMakeLists.txt'\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation libs.appcompat\r\n    implementation libs.material\r\n    implementation libs.preference\r\n    implementation libs.xz\r\n    implementation libs.commons.compress\r\n    testImplementation libs.junit\r\n    androidTestImplementation libs.ext.junit\r\n    androidTestImplementation libs.espresso.core\r\n    implementation(libs.zstd.jni) { artifact { type = 'aar' } }\r\n    implementation 'androidx.appcompat:appcompat:1.4.0'\r\n    implementation 'androidx.preference:preference:1.1.1'\r\n    implementation 'com.google.android.material:material:1.4.0'\r\n    implementation 'com.github.luben:zstd-jni:1.5.2-3@aar'\r\n    implementation 'org.tukaani:xz:1.7'\r\n    implementation 'org.apache.commons:commons-compress:1.20'\r\n    implementation 'androidx.activity:activity-ktx:1.4.0'\r\n    implementation 'androidx.fragment:fragment-ktx:1.4.0'\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	
+++ b/build.gradle	
@@ -1,33 +1,39 @@
 buildscript {
+    ext.kotlin_version = "1.8.0" // Ensure this matches your project's required version
     repositories {
         google()
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:8.1.2'
+        classpath "com.android.tools.build:gradle:8.1.2"
+        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
     }
 }
 
-apply plugin: 'com.android.application'
 plugins {
-    alias(libs.plugins.android.application)
+    id 'com.android.application'
+
 }
 
 android {
-    compileSdk 30
+    namespace 'com.winlator'
+    compileSdk 31
 
     defaultConfig {
         applicationId 'com.winlator'
         minSdkVersion 26
         targetSdkVersion 28
-        versionCode 18
-        versionName "7.1.2-glibc"
+        versionCode 16
+        versionName "7.1.1-glibcmod"
+
+        ndk {
+            abiFilters 'arm64-v8a', 'armeabi-v7a'
+        }
     }
 
     buildTypes {
         debug {
             minifyEnabled false
-            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
 
@@ -35,10 +41,7 @@
         checkReleaseBuilds false
     }
 
-    compileOptions {
-        sourceCompatibility JavaVersion.VERSION_17
-        targetCompatibility JavaVersion.VERSION_17
-    }
+    ndkVersion '22.1.7171670'
 
     externalNativeBuild {
         cmake {
@@ -46,24 +49,27 @@
             path 'src/main/cpp/CMakeLists.txt'
         }
     }
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_17
+        targetCompatibility JavaVersion.VERSION_17
+    }
+
+
+}
+
+task prepareKotlinBuildScriptModel {
+
 }
 
 dependencies {
-    implementation libs.appcompat
-    implementation libs.material
-    implementation libs.preference
-    implementation libs.xz
-    implementation libs.commons.compress
-    testImplementation libs.junit
-    androidTestImplementation libs.ext.junit
-    androidTestImplementation libs.espresso.core
-    implementation(libs.zstd.jni) { artifact { type = 'aar' } }
-    implementation 'androidx.appcompat:appcompat:1.4.0'
-    implementation 'androidx.preference:preference:1.1.1'
-    implementation 'com.google.android.material:material:1.4.0'
-    implementation 'com.github.luben:zstd-jni:1.5.2-3@aar'
-    implementation 'org.tukaani:xz:1.7'
-    implementation 'org.apache.commons:commons-compress:1.20'
-    implementation 'androidx.activity:activity-ktx:1.4.0'
-    implementation 'androidx.fragment:fragment-ktx:1.4.0'
+    implementation "androidx.appcompat:appcompat:1.4.0"
+    implementation "androidx.preference:preference:1.1.1"
+    implementation "com.google.android.material:material:1.4.0"
+    implementation "com.github.luben:zstd-jni:1.5.2-3@aar"
+    implementation "org.tukaani:xz:1.7"
+    implementation "org.apache.commons:commons-compress:1.20"
+    implementation "androidx.activity:activity-ktx:1.4.0"
+    implementation "androidx.fragment:fragment-ktx:1.4.0"
+    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
 }
Index: src/main/java/com/winlator/XServerDisplayActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.winlator;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Looper;\r\nimport android.view.KeyEvent;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.PointerIcon;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.CheckBox;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.Spinner;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.preference.PreferenceManager;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.winlator.box86_64.rc.RCFile;\r\nimport com.winlator.box86_64.rc.RCManager;\r\nimport com.winlator.container.Container;\r\nimport com.winlator.container.ContainerManager;\r\nimport com.winlator.container.Shortcut;\r\nimport com.winlator.contentdialog.ContentDialog;\r\nimport com.winlator.contentdialog.DXVKConfigDialog;\r\nimport com.winlator.contentdialog.DebugDialog;\r\nimport com.winlator.contentdialog.VKD3DConfigDialog;\r\nimport com.winlator.contents.ContentProfile;\r\nimport com.winlator.contents.ContentsManager;\r\nimport com.winlator.core.AppUtils;\r\nimport com.winlator.core.DefaultVersion;\r\nimport com.winlator.core.EnvVars;\r\nimport com.winlator.core.FileUtils;\r\nimport com.winlator.core.GPUInformation;\r\nimport com.winlator.core.KeyValueSet;\r\nimport com.winlator.core.OnExtractFileListener;\r\nimport com.winlator.core.PreloaderDialog;\r\nimport com.winlator.core.ProcessHelper;\r\nimport com.winlator.core.StringUtils;\r\nimport com.winlator.core.TarCompressorUtils;\r\nimport com.winlator.core.WineInfo;\r\nimport com.winlator.core.WineRegistryEditor;\r\nimport com.winlator.core.WineStartMenuCreator;\r\nimport com.winlator.core.WineThemeManager;\r\nimport com.winlator.core.WineUtils;\r\nimport com.winlator.inputcontrols.ControlsProfile;\r\nimport com.winlator.inputcontrols.ExternalController;\r\nimport com.winlator.inputcontrols.InputControlsManager;\r\nimport com.winlator.math.Mathf;\r\nimport com.winlator.math.XForm;\r\nimport com.winlator.renderer.GLRenderer;\r\nimport com.winlator.widget.FrameRating;\r\nimport com.winlator.widget.InputControlsView;\r\nimport com.winlator.widget.MagnifierView;\r\nimport com.winlator.widget.TouchpadView;\r\nimport com.winlator.widget.XServerView;\r\nimport com.winlator.winhandler.TaskManagerDialog;\r\nimport com.winlator.winhandler.WinHandler;\r\nimport com.winlator.xconnector.UnixSocketConfig;\r\nimport com.winlator.xenvironment.ImageFs;\r\nimport com.winlator.xenvironment.XEnvironment;\r\nimport com.winlator.xenvironment.components.ALSAServerComponent;\r\nimport com.winlator.xenvironment.components.GlibcProgramLauncherComponent;\r\nimport com.winlator.xenvironment.components.GuestProgramLauncherComponent;\r\nimport com.winlator.xenvironment.components.NetworkInfoUpdateComponent;\r\nimport com.winlator.xenvironment.components.PulseAudioComponent;\r\nimport com.winlator.xenvironment.components.SysVSharedMemoryComponent;\r\nimport com.winlator.xenvironment.components.VirGLRendererComponent;\r\nimport com.winlator.xenvironment.components.XServerComponent;\r\nimport com.winlator.xserver.Pointer;\r\nimport com.winlator.xserver.Property;\r\nimport com.winlator.xserver.ScreenInfo;\r\nimport com.winlator.xserver.Window;\r\nimport com.winlator.xserver.WindowManager;\r\nimport com.winlator.xserver.XServer;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class XServerDisplayActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {\r\n    private XServerView xServerView;\r\n    private InputControlsView inputControlsView;\r\n    private TouchpadView touchpadView;\r\n    private XEnvironment environment;\r\n    private DrawerLayout drawerLayout;\r\n    private ContainerManager containerManager;\r\n    private Container container;\r\n    private XServer xServer;\r\n    private InputControlsManager inputControlsManager;\r\n    private ImageFs imageFs;\r\n    private FrameRating frameRating;\r\n    private Runnable editInputControlsCallback;\r\n    private Shortcut shortcut;\r\n    private String graphicsDriver = Container.DEFAULT_GRAPHICS_DRIVER;\r\n    private String audioDriver = Container.DEFAULT_AUDIO_DRIVER;\r\n    private String dxwrapper = Container.DEFAULT_DXWRAPPER;\r\n    private KeyValueSet dxwrapperConfig;\r\n    private WineInfo wineInfo;\r\n    private final EnvVars envVars = new EnvVars();\r\n    private boolean firstTimeBoot = false;\r\n    private SharedPreferences preferences;\r\n    private OnExtractFileListener onExtractFileListener;\r\n    private final WinHandler winHandler = new WinHandler(this);\r\n    private float globalCursorSpeed = 1.0f;\r\n    private MagnifierView magnifierView;\r\n    private DebugDialog debugDialog;\r\n    private short taskAffinityMask = 0;\r\n    private short taskAffinityMaskWoW64 = 0;\r\n    private int frameRatingWindowId = -1;\r\n    private boolean pointerCaptureRequested = false; // Flag to track if pointer capture was requested\r\n    private final float[] xform = XForm.getInstance();\r\n    private ContentsManager contentsManager;\r\n    private boolean navigationFocused = false;\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        AppUtils.hideSystemUI(this);\r\n        AppUtils.keepScreenOn(this);\r\n        setContentView(R.layout.xserver_display_activity);\r\n\r\n        final PreloaderDialog preloaderDialog = new PreloaderDialog(this);\r\n        preferences = PreferenceManager.getDefaultSharedPreferences(this);\r\n\r\n        contentsManager = new ContentsManager(this);\r\n        contentsManager.syncContents();\r\n\r\n        drawerLayout = findViewById(R.id.DrawerLayout);\r\n        drawerLayout.setOnApplyWindowInsetsListener((view, windowInsets) -> windowInsets.replaceSystemWindowInsets(0, 0, 0, 0));\r\n        drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);\r\n\r\n        NavigationView navigationView = findViewById(R.id.NavigationView);\r\n        ProcessHelper.removeAllDebugCallbacks();\r\n        boolean enableLogs = preferences.getBoolean(\"enable_wine_debug\", false) || preferences.getBoolean(\"enable_box86_64_logs\", false);\r\n        if (enableLogs) ProcessHelper.addDebugCallback(debugDialog = new DebugDialog(this));\r\n        Menu menu = navigationView.getMenu();\r\n        menu.findItem(R.id.main_menu_logs).setVisible(enableLogs);\r\n        if (XrActivity.isSupported()) menu.findItem(R.id.main_menu_magnifier).setVisible(false);\r\n        navigationView.setNavigationItemSelectedListener(this);\r\n        navigationView.setPointerIcon(PointerIcon.getSystemIcon(this, PointerIcon.TYPE_ARROW));\r\n        navigationView.setOnFocusChangeListener((v, hasFocus) -> navigationFocused = hasFocus);\r\n        drawerLayout.addDrawerListener(new DrawerLayout.SimpleDrawerListener() {\r\n            @Override\r\n            public void onDrawerOpened(View drawerView) {\r\n                super.onDrawerOpened(drawerView);\r\n                navigationView.requestFocus();\r\n            }\r\n        });\r\n\r\n        imageFs = ImageFs.find(this);\r\n\r\n        String screenSize = Container.DEFAULT_SCREEN_SIZE;\r\n        if (!isGenerateWineprefix()) {\r\n            containerManager = new ContainerManager(this);\r\n            container = containerManager.getContainerById(getIntent().getIntExtra(\"container_id\", 0));\r\n            containerManager.activateContainer(container);\r\n\r\n//            boolean wineprefixNeedsUpdate = container.getExtra(\"wineprefixNeedsUpdate\").equals(\"t\");\r\n//            if (wineprefixNeedsUpdate) {\r\n//                preloaderDialog.show(R.string.updating_system_files);\r\n//                WineUtils.updateWineprefix(this, (status) -> {\r\n//                    if (status == 0) {\r\n//                        container.putExtra(\"wineprefixNeedsUpdate\", null);\r\n//                        container.putExtra(\"wincomponents\", null);\r\n//                        container.saveData();\r\n//                        AppUtils.restartActivity(this);\r\n//                    }\r\n//                    else finish();\r\n//                });\r\n//                return;\r\n//            }\r\n\r\n            taskAffinityMask = (short)ProcessHelper.getAffinityMask(container.getCPUList(true));\r\n            taskAffinityMaskWoW64 = (short)ProcessHelper.getAffinityMask(container.getCPUListWoW64(true));\r\n            firstTimeBoot = container.getExtra(\"appVersion\").isEmpty();\r\n\r\n            String wineVersion = container.getWineVersion();\r\n            wineInfo = WineInfo.fromIdentifier(this, wineVersion);\r\n\r\n            if (wineInfo != WineInfo.MAIN_WINE_VERSION) imageFs.setWinePath(wineInfo.path);\r\n\r\n            String shortcutPath = getIntent().getStringExtra(\"shortcut_path\");\r\n            if (shortcutPath != null && !shortcutPath.isEmpty()) shortcut = new Shortcut(container, new File(shortcutPath));\r\n\r\n            graphicsDriver = container.getGraphicsDriver();\r\n            audioDriver = container.getAudioDriver();\r\n            dxwrapper = container.getDXWrapper();\r\n            String dxwrapperConfig = container.getDXWrapperConfig();\r\n            screenSize = container.getScreenSize();\r\n\r\n            if (shortcut != null) {\r\n                graphicsDriver = shortcut.getExtra(\"graphicsDriver\", container.getGraphicsDriver());\r\n                audioDriver = shortcut.getExtra(\"audioDriver\", container.getAudioDriver());\r\n                dxwrapper = shortcut.getExtra(\"dxwrapper\", container.getDXWrapper());\r\n                dxwrapperConfig = shortcut.getExtra(\"dxwrapperConfig\", container.getDXWrapperConfig());\r\n                screenSize = shortcut.getExtra(\"screenSize\", container.getScreenSize());\r\n\r\n                String dinputMapperType = shortcut.getExtra(\"dinputMapperType\");\r\n                if (!dinputMapperType.isEmpty()) winHandler.setDInputMapperType(Byte.parseByte(dinputMapperType));\r\n            }\r\n\r\n            if (dxwrapper.equals(\"dxvk\") || dxwrapper.equals(\"vkd3d\")) this.dxwrapperConfig = DXVKConfigDialog.parseConfig(dxwrapperConfig);\r\n\r\n            if (!wineInfo.isWin64()) {\r\n                onExtractFileListener = (file, size) -> {\r\n                    String path = file.getPath();\r\n                    if (path.contains(\"system32/\")) return null;\r\n                    return new File(path.replace(\"syswow64/\", \"system32/\"));\r\n                };\r\n            }\r\n        }\r\n\r\n        preloaderDialog.show(R.string.starting_up);\r\n\r\n        inputControlsManager = new InputControlsManager(this);\r\n        xServer = new XServer(new ScreenInfo(screenSize));\r\n        xServer.setWinHandler(winHandler);\r\n        boolean[] winStarted = {false};\r\n        xServer.windowManager.addOnWindowModificationListener(new WindowManager.OnWindowModificationListener() {\r\n            @Override\r\n            public void onUpdateWindowContent(Window window) {\r\n                if (!winStarted[0] && window.isApplicationWindow()) {\r\n                    xServerView.getRenderer().setCursorVisible(true);\r\n                    preloaderDialog.closeOnUiThread();\r\n                    winStarted[0] = true;\r\n                }\r\n\r\n                if (window.id == frameRatingWindowId) frameRating.update();\r\n            }\r\n\r\n            @Override\r\n            public void onModifyWindowProperty(Window window, Property property) {\r\n                changeFrameRatingVisibility(window, property);\r\n            }\r\n\r\n            @Override\r\n            public void onMapWindow(Window window) {\r\n                assignTaskAffinity(window);\r\n            }\r\n\r\n            @Override\r\n            public void onUnmapWindow(Window window) {\r\n                changeFrameRatingVisibility(window, null);\r\n            }\r\n        });\r\n\r\n        setupUI();\r\n\r\n        Executors.newSingleThreadExecutor().execute(() -> {\r\n            if (!isGenerateWineprefix()) {\r\n                setupWineSystemFiles();\r\n                extractGraphicsDriverFiles();\r\n                changeWineAudioDriver();\r\n            }\r\n            setupXEnvironment();\r\n        });\r\n    }\r\n\r\n    private void handleCapturedPointer(MotionEvent event) {\r\n\r\n        boolean handled = false;\r\n\r\n        // Update XServer pointer position\r\n        float dx = event.getX();\r\n        float dy = event.getY();\r\n\r\n        xServer.injectPointerMoveDelta((int) dx, (int) dy);\r\n\r\n        int actionButton = event.getActionButton();\r\n        switch (event.getAction()) {\r\n            case MotionEvent.ACTION_BUTTON_PRESS:\r\n                if (actionButton == MotionEvent.BUTTON_PRIMARY) {\r\n                    xServer.injectPointerButtonPress(Pointer.Button.BUTTON_LEFT);\r\n                }\r\n                else if (actionButton == MotionEvent.BUTTON_SECONDARY) {\r\n                    xServer.injectPointerButtonPress(Pointer.Button.BUTTON_RIGHT);\r\n                }\r\n                handled = true;\r\n                break;\r\n            case MotionEvent.ACTION_BUTTON_RELEASE:\r\n                if (actionButton == MotionEvent.BUTTON_PRIMARY) {\r\n                    xServer.injectPointerButtonRelease(Pointer.Button.BUTTON_LEFT);\r\n                }\r\n                else if (actionButton == MotionEvent.BUTTON_SECONDARY) {\r\n                    xServer.injectPointerButtonRelease(Pointer.Button.BUTTON_RIGHT);\r\n                }\r\n                handled = true;\r\n                break;\r\n            case MotionEvent.ACTION_HOVER_MOVE:\r\n                float[] transformedPoint = XForm.transformPoint(xform, event.getX(), event.getY());\r\n                xServer.injectPointerMove((int)transformedPoint[0], (int)transformedPoint[1]);\r\n                handled = true;\r\n                break;\r\n            case MotionEvent.ACTION_SCROLL:\r\n                float scrollY = event.getAxisValue(MotionEvent.AXIS_VSCROLL);\r\n                if (scrollY <= -1.0f) {\r\n                    xServer.injectPointerButtonPress(Pointer.Button.BUTTON_SCROLL_DOWN);\r\n                    xServer.injectPointerButtonRelease(Pointer.Button.BUTTON_SCROLL_DOWN);\r\n                }\r\n                else if (scrollY >= 1.0f) {\r\n                    xServer.injectPointerButtonPress(Pointer.Button.BUTTON_SCROLL_UP);\r\n                    xServer.injectPointerButtonRelease(Pointer.Button.BUTTON_SCROLL_UP);\r\n                }\r\n                handled = true;\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n//    private void setCustomCursor() {\r\n//        View decorView = getWindow().getDecorView();\r\n//        Bitmap transparentCursorBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.transparent_cursor);\r\n//        PointerIcon transparentCursorIcon = PointerIcon.create(transparentCursorBitmap, 0, 0);\r\n//        decorView.setPointerIcon(transparentCursorIcon);\r\n//    }\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == MainActivity.EDIT_INPUT_CONTROLS_REQUEST_CODE && resultCode == Activity.RESULT_OK) {\r\n            if (editInputControlsCallback != null) {\r\n                editInputControlsCallback.run();\r\n                editInputControlsCallback = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        if (environment != null) {\r\n            xServerView.onResume();\r\n            environment.onResume();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        if (environment != null) {\r\n            environment.onPause();\r\n            xServerView.onPause();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        winHandler.stop();\r\n        if (environment != null) environment.stopEnvironmentComponents();\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (environment != null) {\r\n            if (!drawerLayout.isDrawerOpen(GravityCompat.START)) {\r\n                drawerLayout.openDrawer(GravityCompat.START);\r\n            }\r\n            else drawerLayout.closeDrawers();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n        final GLRenderer renderer = xServerView.getRenderer();\r\n        switch (item.getItemId()) {\r\n            case R.id.main_menu_keyboard:\r\n                AppUtils.showKeyboard(this);\r\n                drawerLayout.closeDrawers();\r\n                break;\r\n            case R.id.main_menu_input_controls:\r\n                showInputControlsDialog();\r\n                drawerLayout.closeDrawers();\r\n                break;\r\n            case R.id.main_menu_toggle_fullscreen:\r\n                renderer.toggleFullscreen();\r\n                drawerLayout.closeDrawers();\r\n                break;\r\n            case R.id.main_menu_task_manager:\r\n                (new TaskManagerDialog(this)).show();\r\n                drawerLayout.closeDrawers();\r\n                break;\r\n            case R.id.main_menu_magnifier:\r\n                if (magnifierView == null) {\r\n                    final FrameLayout container = findViewById(R.id.FLXServerDisplay);\r\n                    magnifierView = new MagnifierView(this);\r\n                    magnifierView.setZoomButtonCallback((value) -> {\r\n                        renderer.setMagnifierZoom(Mathf.clamp(renderer.getMagnifierZoom() + value, 1.0f, 3.0f));\r\n                        magnifierView.setZoomValue(renderer.getMagnifierZoom());\r\n                    });\r\n                    magnifierView.setZoomValue(renderer.getMagnifierZoom());\r\n                    magnifierView.setHideButtonCallback(() -> {\r\n                        container.removeView(magnifierView);\r\n                        magnifierView = null;\r\n                    });\r\n                    container.addView(magnifierView);\r\n                }\r\n                drawerLayout.closeDrawers();\r\n                break;\r\n            case R.id.main_menu_logs:\r\n                debugDialog.show();\r\n                drawerLayout.closeDrawers();\r\n                break;\r\n            case R.id.main_menu_touchpad_help:\r\n                showTouchpadHelpDialog();\r\n                break;\r\n            case R.id.main_menu_exit:\r\n                exit();\r\n                break;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onWindowFocusChanged(boolean hasFocus) {\r\n        super.onWindowFocusChanged(hasFocus);\r\n        boolean cursorLock = preferences.getBoolean(\"cursor_lock\", false);\r\n\r\n        if (hasFocus && !pointerCaptureRequested && cursorLock) {\r\n            // Ensure TouchpadView and other relevant views are focused\r\n            touchpadView.setFocusable(View.FOCUSABLE);\r\n            touchpadView.setFocusableInTouchMode(true);\r\n            touchpadView.requestFocus();\r\n            touchpadView.requestPointerCapture();\r\n\r\n            touchpadView.setOnCapturedPointerListener(new View.OnCapturedPointerListener() {\r\n                @Override\r\n                public boolean onCapturedPointer(View view, MotionEvent event) {\r\n                    handleCapturedPointer(event);\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            pointerCaptureRequested = true; // Ensure this is only called once\r\n\r\n        } else if (!hasFocus) {\r\n            if (touchpadView != null) {\r\n                touchpadView.releasePointerCapture();\r\n                touchpadView.setOnCapturedPointerListener(null);\r\n            }\r\n        }\r\n    }\r\n    private void exit() {\r\n        winHandler.stop();\r\n        if (environment != null) environment.stopEnvironmentComponents();\r\n        AppUtils.restartApplication(this);\r\n    }\r\n\r\n    private void setupWineSystemFiles() {\r\n        String appVersion = String.valueOf(AppUtils.getVersionCode(this));\r\n        String imgVersion = String.valueOf(imageFs.getVersion());\r\n        boolean containerDataChanged = false;\r\n\r\n        if (!container.getExtra(\"appVersion\").equals(appVersion) || !container.getExtra(\"imgVersion\").equals(imgVersion)) {\r\n            applyGeneralPatches(container);\r\n            container.putExtra(\"appVersion\", appVersion);\r\n            container.putExtra(\"imgVersion\", imgVersion);\r\n            containerDataChanged = true;\r\n        }\r\n\r\n        String dxwrapper = this.dxwrapper;\r\n        if (dxwrapper.equals(\"dxvk\"))\r\n            dxwrapper = \"dxvk-\"+dxwrapperConfig.get(\"version\");\r\n        else if (dxwrapper.equals(\"vkd3d\"))\r\n            dxwrapper = \"vkd3d-\"+dxwrapperConfig.get(\"vkd3dVersion\");\r\n\r\n        if (!dxwrapper.equals(container.getExtra(\"dxwrapper\"))) {\r\n            extractDXWrapperFiles(dxwrapper);\r\n            container.putExtra(\"dxwrapper\", dxwrapper);\r\n            containerDataChanged = true;\r\n        }\r\n\r\n        if (dxwrapper.equals(\"cnc-ddraw\")) envVars.put(\"CNC_DDRAW_CONFIG_FILE\", \"C:\\\\ProgramData\\\\cnc-ddraw\\\\ddraw.ini\");\r\n\r\n        String wincomponents = shortcut != null ? shortcut.getExtra(\"wincomponents\", container.getWinComponents()) : container.getWinComponents();\r\n        if (!wincomponents.equals(container.getExtra(\"wincomponents\"))) {\r\n            extractWinComponentFiles();\r\n            container.putExtra(\"wincomponents\", wincomponents);\r\n            containerDataChanged = true;\r\n        }\r\n\r\n        String desktopTheme = container.getDesktopTheme();\r\n        if (!(desktopTheme+\",\"+xServer.screenInfo).equals(container.getExtra(\"desktopTheme\"))) {\r\n            WineThemeManager.apply(this, new WineThemeManager.ThemeInfo(desktopTheme), xServer.screenInfo);\r\n            container.putExtra(\"desktopTheme\", desktopTheme+\",\"+xServer.screenInfo);\r\n            containerDataChanged = true;\r\n        }\r\n\r\n        WineStartMenuCreator.create(this, container);\r\n        WineUtils.createDosdevicesSymlinks(container);\r\n\r\n        String startupSelection = String.valueOf(container.getStartupSelection());\r\n        if (!startupSelection.equals(container.getExtra(\"startupSelection\"))) {\r\n            WineUtils.changeServicesStatus(container, container.getStartupSelection() != Container.STARTUP_SELECTION_NORMAL);\r\n            container.putExtra(\"startupSelection\", startupSelection);\r\n            containerDataChanged = true;\r\n        }\r\n\r\n        if (containerDataChanged) container.saveData();\r\n    }\r\n\r\n    private void setupXEnvironment() {\r\n        envVars.put(\"MESA_DEBUG\", \"silent\");\r\n        envVars.put(\"MESA_NO_ERROR\", \"1\");\r\n        envVars.put(\"WINEPREFIX\", imageFs.wineprefix);\r\n\r\n        boolean enableWineDebug = preferences.getBoolean(\"enable_wine_debug\", false);\r\n        String wineDebugChannels = preferences.getString(\"wine_debug_channels\", SettingsFragment.DEFAULT_WINE_DEBUG_CHANNELS);\r\n        envVars.put(\"WINEDEBUG\", enableWineDebug && !wineDebugChannels.isEmpty() ? \"+\"+wineDebugChannels.replace(\",\", \",+\") : \"-all\");\r\n\r\n        String rootPath = imageFs.getRootDir().getPath();\r\n        FileUtils.clear(imageFs.getTmpDir());\r\n\r\n        boolean usrGlibc = preferences.getBoolean(\"use_glibc\", true);\r\n        GuestProgramLauncherComponent guestProgramLauncherComponent = usrGlibc\r\n                ? new GlibcProgramLauncherComponent(contentsManager, contentsManager.getProfileByEntryName(container.getWineVersion()))\r\n                : new GuestProgramLauncherComponent();\r\n\r\n        if (container != null) {\r\n            if (container.getStartupSelection() == Container.STARTUP_SELECTION_AGGRESSIVE) winHandler.killProcess(\"services.exe\");\r\n\r\n            boolean wow64Mode = container.isWoW64Mode();\r\n//            String guestExecutable = wineInfo.getExecutable(this, wow64Mode)+\" explorer /desktop=shell,\"+xServer.screenInfo+\" \"+getWineStartCommand();\r\n            String guestExecutable = \"wine explorer /desktop=shell,\"+xServer.screenInfo+\" \"+getWineStartCommand();\r\n            guestProgramLauncherComponent.setWoW64Mode(wow64Mode);\r\n            guestProgramLauncherComponent.setGuestExecutable(guestExecutable);\r\n\r\n            envVars.putAll(container.getEnvVars());\r\n            if (shortcut != null) envVars.putAll(shortcut.getExtra(\"envVars\"));\r\n            if (!envVars.has(\"WINEESYNC\")) envVars.put(\"WINEESYNC\", \"1\");\r\n\r\n            ArrayList<String> bindingPaths = new ArrayList<>();\r\n            for (String[] drive : container.drivesIterator()) bindingPaths.add(drive[1]);\r\n            guestProgramLauncherComponent.setBindingPaths(bindingPaths.toArray(new String[0]));\r\n            guestProgramLauncherComponent.setBox86Preset(shortcut != null ? shortcut.getExtra(\"box86Preset\", container.getBox86Preset()) : container.getBox86Preset());\r\n            guestProgramLauncherComponent.setBox64Preset(shortcut != null ? shortcut.getExtra(\"box64Preset\", container.getBox64Preset()) : container.getBox64Preset());\r\n        }\r\n\r\n        environment = new XEnvironment(this, imageFs);\r\n        environment.addComponent(new SysVSharedMemoryComponent(xServer, UnixSocketConfig.createSocket(rootPath, UnixSocketConfig.SYSVSHM_SERVER_PATH)));\r\n        environment.addComponent(new XServerComponent(xServer, UnixSocketConfig.createSocket(rootPath, UnixSocketConfig.XSERVER_PATH)));\r\n        environment.addComponent(new NetworkInfoUpdateComponent());\r\n\r\n        if (audioDriver.equals(\"alsa\")) {\r\n            envVars.put(\"ANDROID_ALSA_SERVER\", imageFs.getRootDir().getPath() + UnixSocketConfig.ALSA_SERVER_PATH);\r\n            envVars.put(\"ANDROID_ASERVER_USE_SHM\", \"true\");\r\n            environment.addComponent(new ALSAServerComponent(UnixSocketConfig.createSocket(rootPath, UnixSocketConfig.ALSA_SERVER_PATH)));\r\n        }\r\n        else if (audioDriver.equals(\"pulseaudio\")) {\r\n            envVars.put(\"PULSE_SERVER\", imageFs.getRootDir().getPath() + UnixSocketConfig.PULSE_SERVER_PATH);\r\n            environment.addComponent(new PulseAudioComponent(UnixSocketConfig.createSocket(rootPath, UnixSocketConfig.PULSE_SERVER_PATH)));\r\n        }\r\n\r\n        if (graphicsDriver.startsWith(\"virgl\")) {\r\n            environment.addComponent(new VirGLRendererComponent(xServer, UnixSocketConfig.createSocket(rootPath, UnixSocketConfig.VIRGL_SERVER_PATH)));\r\n        }\r\n\r\n        RCManager manager = new RCManager(this);\r\n        manager.loadRCFiles();\r\n        int rcfileId = shortcut == null ? container.getRCFileId() :\r\n                Integer.parseInt(shortcut.getExtra(\"rcfileId\", String.valueOf(container.getRCFileId())));\r\n        RCFile rcfile = manager.getRcfile(rcfileId);\r\n        File file = new File(container.getRootDir(), \".box64rc\");\r\n        String str = rcfile == null ? \"\" : rcfile.generateBox86_64rc();\r\n        FileUtils.writeString(file, str);\r\n        envVars.put(\"BOX64_RCFILE\", file.getAbsolutePath());\r\n\r\n        guestProgramLauncherComponent.setEnvVars(envVars);\r\n        guestProgramLauncherComponent.setTerminationCallback((status) -> exit());\r\n        environment.addComponent(guestProgramLauncherComponent);\r\n\r\n        if (isGenerateWineprefix()) generateWineprefix();\r\n        environment.startEnvironmentComponents();\r\n\r\n        winHandler.start();\r\n        envVars.clear();\r\n        dxwrapperConfig = null;\r\n    }\r\n\r\n    private void setupUI() {\r\n        FrameLayout rootView = findViewById(R.id.FLXServerDisplay);\r\n        xServerView = new XServerView(this, xServer);\r\n        final GLRenderer renderer = xServerView.getRenderer();\r\n        renderer.setCursorVisible(false);\r\n\r\n        if (shortcut != null) {\r\n            if (shortcut.getExtra(\"forceFullscreen\", \"0\").equals(\"1\")) renderer.setForceFullscreenWMClass(shortcut.wmClass);\r\n            renderer.setUnviewableWMClasses(\"explorer.exe\");\r\n        }\r\n\r\n        xServer.setRenderer(renderer);\r\n        rootView.addView(xServerView);\r\n\r\n        globalCursorSpeed = preferences.getFloat(\"cursor_speed\", 1.0f);\r\n        touchpadView = new TouchpadView(this, xServer);\r\n        touchpadView.setSensitivity(globalCursorSpeed);\r\n        touchpadView.setFourFingersTapCallback(() -> {\r\n            if (!drawerLayout.isDrawerOpen(GravityCompat.START)) drawerLayout.openDrawer(GravityCompat.START);\r\n        });\r\n        rootView.addView(touchpadView);\r\n\r\n        inputControlsView = new InputControlsView(this);\r\n        inputControlsView.setOverlayOpacity(preferences.getFloat(\"overlay_opacity\", InputControlsView.DEFAULT_OVERLAY_OPACITY));\r\n        inputControlsView.setTouchpadView(touchpadView);\r\n        inputControlsView.setXServer(xServer);\r\n        inputControlsView.setVisibility(View.GONE);\r\n        rootView.addView(inputControlsView);\r\n\r\n        if (container != null && container.isShowFPS()) {\r\n            frameRating = new FrameRating(this);\r\n            frameRating.setVisibility(View.GONE);\r\n            rootView.addView(frameRating);\r\n        }\r\n\r\n        if (shortcut != null) {\r\n            String controlsProfile = shortcut.getExtra(\"controlsProfile\");\r\n            if (!controlsProfile.isEmpty()) {\r\n                ControlsProfile profile = inputControlsManager.getProfile(Integer.parseInt(controlsProfile));\r\n                if (profile != null) showInputControls(profile);\r\n            }\r\n\r\n            String simTouchScreen = shortcut.getExtra(\"simTouchScreen\");\r\n            touchpadView.setSimTouchScreen(simTouchScreen.equals(\"1\"));\r\n        }\r\n\r\n        AppUtils.observeSoftKeyboardVisibility(drawerLayout, renderer::setScreenOffsetYRelativeToCursor);\r\n    }\r\n\r\n    private void showInputControlsDialog() {\r\n        final ContentDialog dialog = new ContentDialog(this, R.layout.input_controls_dialog);\r\n        dialog.setTitle(R.string.input_controls);\r\n        dialog.setIcon(R.drawable.icon_input_controls);\r\n\r\n        final Spinner sProfile = dialog.findViewById(R.id.SProfile);\r\n        Runnable loadProfileSpinner = () -> {\r\n            ArrayList<ControlsProfile> profiles = inputControlsManager.getProfiles(true);\r\n            ArrayList<String> profileItems = new ArrayList<>();\r\n            int selectedPosition = 0;\r\n            profileItems.add(\"-- \"+getString(R.string.disabled)+\" --\");\r\n            for (int i = 0; i < profiles.size(); i++) {\r\n                ControlsProfile profile = profiles.get(i);\r\n                if (profile == inputControlsView.getProfile()) selectedPosition = i + 1;\r\n                profileItems.add(profile.getName());\r\n            }\r\n\r\n            sProfile.setAdapter(new ArrayAdapter<>(this, android.R.layout.simple_spinner_dropdown_item, profileItems));\r\n            sProfile.setSelection(selectedPosition);\r\n        };\r\n        loadProfileSpinner.run();\r\n\r\n        final CheckBox cbRelativeMouseMovement = dialog.findViewById(R.id.CBRelativeMouseMovement);\r\n        cbRelativeMouseMovement.setChecked(xServer.isRelativeMouseMovement());\r\n\r\n        final CheckBox cbSimTouchScreen = dialog.findViewById(R.id.CBSimulateTouchScreen);\r\n        cbSimTouchScreen.setChecked(touchpadView.isSimTouchScreen());\r\n\r\n        final CheckBox cbShowTouchscreenControls = dialog.findViewById(R.id.CBShowTouchscreenControls);\r\n        cbShowTouchscreenControls.setChecked(inputControlsView.isShowTouchscreenControls());\r\n\r\n        dialog.findViewById(R.id.BTSettings).setOnClickListener((v) -> {\r\n            int position = sProfile.getSelectedItemPosition();\r\n            Intent intent = new Intent(this, MainActivity.class);\r\n            intent.putExtra(\"edit_input_controls\", true);\r\n            intent.putExtra(\"selected_profile_id\", position > 0 ? inputControlsManager.getProfiles().get(position - 1).id : 0);\r\n            editInputControlsCallback = () -> {\r\n                hideInputControls();\r\n                inputControlsManager.loadProfiles(true);\r\n                loadProfileSpinner.run();\r\n            };\r\n            startActivityForResult(intent, MainActivity.EDIT_INPUT_CONTROLS_REQUEST_CODE);\r\n        });\r\n\r\n        dialog.setOnConfirmCallback(() -> {\r\n            xServer.setRelativeMouseMovement(cbRelativeMouseMovement.isChecked());\r\n            inputControlsView.setShowTouchscreenControls(cbShowTouchscreenControls.isChecked());\r\n            int position = sProfile.getSelectedItemPosition();\r\n            if (position > 0) {\r\n                showInputControls(inputControlsManager.getProfiles().get(position - 1));\r\n            }\r\n            else hideInputControls();\r\n            touchpadView.setSimTouchScreen(cbSimTouchScreen.isChecked());\r\n        });\r\n\r\n        dialog.show();\r\n    }\r\n\r\n    private void showInputControls(ControlsProfile profile) {\r\n        inputControlsView.setVisibility(View.VISIBLE);\r\n        inputControlsView.requestFocus();\r\n        inputControlsView.setProfile(profile);\r\n\r\n        touchpadView.setSensitivity(profile.getCursorSpeed() * globalCursorSpeed);\r\n        touchpadView.setPointerButtonRightEnabled(false);\r\n\r\n        inputControlsView.invalidate();\r\n    }\r\n\r\n    private void hideInputControls() {\r\n        inputControlsView.setShowTouchscreenControls(true);\r\n        inputControlsView.setVisibility(View.GONE);\r\n        inputControlsView.setProfile(null);\r\n\r\n        touchpadView.setSensitivity(globalCursorSpeed);\r\n        touchpadView.setPointerButtonLeftEnabled(true);\r\n        touchpadView.setPointerButtonRightEnabled(true);\r\n\r\n        inputControlsView.invalidate();\r\n    }\r\n\r\n    private void extractGraphicsDriverFiles() {\r\n        String cacheId = graphicsDriver;\r\n        String selectedDriverVersion = container.getGraphicsDriverVersion(); // Fetch the selected version\r\n\r\n        if (graphicsDriver.equals(\"turnip\")) {\r\n            cacheId += \"-\" + selectedDriverVersion + \"-\" + DefaultVersion.ZINK; // Use selected driver version\r\n        } else if (graphicsDriver.equals(\"virgl\")) {\r\n            cacheId += \"-\" + DefaultVersion.VIRGL;\r\n        }\r\n\r\n        boolean changed = !cacheId.equals(container.getExtra(\"graphicsDriver\"));\r\n        String cacheId = container.getExtra(\"graphicsDriver\");\r\n        boolean changed = !cacheId.equals(graphicsDriver);\r\n        File rootDir = imageFs.getRootDir();\r\n\r\n        if (changed) {\r\n            FileUtils.delete(new File(imageFs.getLib32Dir(), \"libvulkan_freedreno.so\"));\r\n            FileUtils.delete(new File(imageFs.getLib64Dir(), \"libvulkan_freedreno.so\"));\r\n            FileUtils.delete(new File(imageFs.getLib64Dir(), \"libGL.so.1\"));\r\n            container.putExtra(\"graphicsDriver\", graphicsDriver);\r\n            container.saveData();\r\n        }\r\n\r\n        if (graphicsDriver.startsWith(\"turnip\")) {\r\n            if (dxwrapper.equals(\"dxvk\"))\r\n                DXVKConfigDialog.setEnvVars(this, dxwrapperConfig, envVars);\r\n            else if (dxwrapper.equals(\"vkd3d\"))\r\n                VKD3DConfigDialog.setEnvVars(this, dxwrapperConfig, envVars);\r\n\r\n            envVars.put(\"GALLIUM_DRIVER\", \"zink\");\r\n            envVars.put(\"TU_OVERRIDE_HEAP_SIZE\", \"4096\");\r\n            if (!envVars.has(\"MESA_VK_WSI_PRESENT_MODE\")) envVars.put(\"MESA_VK_WSI_PRESENT_MODE\", \"mailbox\");\r\n            envVars.put(\"vblank_mode\", \"0\");\r\n\r\n            if (!GPUInformation.isAdreno6xx(this)) {\r\n                EnvVars userEnvVars = new EnvVars(container.getEnvVars());\r\n                String tuDebug = userEnvVars.get(\"TU_DEBUG\");\r\n                if (!tuDebug.contains(\"sysmem\")) userEnvVars.put(\"TU_DEBUG\", (!tuDebug.isEmpty() ? tuDebug+\",\" : \"\")+\"sysmem\");\r\n                container.setEnvVars(userEnvVars.toString());\r\n            }\r\n\r\n            boolean useDRI3 = preferences.getBoolean(\"use_dri3\", true);\r\n            if (!useDRI3) {\r\n                envVars.put(\"MESA_VK_WSI_PRESENT_MODE\", \"immediate\");\r\n                envVars.put(\"MESA_VK_WSI_DEBUG\", \"sw\");\r\n            }\r\n\r\n            if (changed) {\r\n                TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"graphics_driver/turnip-\" + selectedDriverVersion + \".tzst\", rootDir); // Use selected driver version\r\n                TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"graphics_driver/zink-\" + DefaultVersion.ZINK + \".tzst\", rootDir);\r\n                ContentProfile profile = contentsManager.getProfileByEntryName(graphicsDriver);\r\n                if (profile != null) {\r\n                    contentsManager.applyContent(profile);\r\n                } else {\r\n                    TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"graphics_driver/turnip-\" + DefaultVersion.TURNIP + \".tzst\", rootDir);\r\n                    TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"graphics_driver/zink-\" + DefaultVersion.ZINK + \".tzst\", rootDir);\r\n                }\r\n            }\r\n        } else if (graphicsDriver.equals(\"virgl\")) {\r\n        }\r\n        else if (graphicsDriver.startsWith(\"virgl\")) {\r\n            envVars.put(\"GALLIUM_DRIVER\", \"virpipe\");\r\n            envVars.put(\"VIRGL_NO_READBACK\", \"true\");\r\n            envVars.put(\"VIRGL_SERVER_PATH\", rootDir + UnixSocketConfig.VIRGL_SERVER_PATH);\r\n            envVars.put(\"MESA_EXTENSION_OVERRIDE\", \"-GL_EXT_vertex_array_bgra\");\r\n            envVars.put(\"MESA_GL_VERSION_OVERRIDE\", \"3.1\");\r\n            envVars.put(\"vblank_mode\", \"0\");\r\n            if (changed) TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"graphics_driver/virgl-\" + DefaultVersion.VIRGL + \".tzst\", rootDir);\r\n            if (changed) {\r\n                ContentProfile profile = contentsManager.getProfileByEntryName(graphicsDriver);\r\n                if (profile != null)\r\n                    contentsManager.applyContent(profile);\r\n                else\r\n                    TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"graphics_driver/virgl-\" + DefaultVersion.VIRGL + \".tzst\", rootDir);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void showTouchpadHelpDialog() {\r\n        ContentDialog dialog = new ContentDialog(this, R.layout.touchpad_help_dialog);\r\n        dialog.setTitle(R.string.touchpad_help);\r\n        dialog.setIcon(R.drawable.icon_help);\r\n        dialog.findViewById(R.id.BTCancel).setVisibility(View.GONE);\r\n        dialog.show();\r\n    }\r\n\r\n    @Override\r\n    public boolean dispatchGenericMotionEvent(MotionEvent event) {\r\n        return winHandler.onGenericMotionEvent(event) || (!navigationFocused && touchpadView.onExternalMouseEvent(event)) || super.dispatchGenericMotionEvent(event);\r\n    }\r\n\r\n    private static final int RECAPTURE_DELAY_MS = 10000; // 10 seconds\r\n\r\n    @Override\r\n    public boolean dispatchKeyEvent(KeyEvent event) {\r\n        if (event.getAction() == KeyEvent.ACTION_DOWN && event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_DOWN) {\r\n            // Release pointer capture when Volume Down key is pressed\r\n            if (touchpadView != null && pointerCaptureRequested) {\r\n                touchpadView.releasePointerCapture();\r\n                touchpadView.setOnCapturedPointerListener(null);\r\n                pointerCaptureRequested = false;\r\n\r\n                // Show toast message for pointer release\r\n                AppUtils.showToast(this,\"Pointer capture released for 10 seconds\");\r\n\r\n                // Schedule recapture after 10 seconds\r\n                new Handler(Looper.getMainLooper()).postDelayed(() -> {\r\n                    if (touchpadView != null) {\r\n                        touchpadView.requestPointerCapture();\r\n                        touchpadView.setOnCapturedPointerListener(new View.OnCapturedPointerListener() {\r\n                            @Override\r\n                            public boolean onCapturedPointer(View view, MotionEvent event) {\r\n                                handleCapturedPointer(event);\r\n                                return true;\r\n                            }\r\n                        });\r\n                        pointerCaptureRequested = true;\r\n\r\n                        // Show toast message for pointer recapture\r\n                        AppUtils.showToast(this,\"Pointer re-captured. If not working, press again to release and re-capture\");\r\n                    }\r\n                }, RECAPTURE_DELAY_MS);\r\n\r\n                return true; // Indicate that the event was handled\r\n            }\r\n        }\r\n\r\n        return (!inputControlsView.onKeyEvent(event) && !winHandler.onKeyEvent(event) && xServer.keyboard.onKeyEvent(event)) ||\r\n                (!ExternalController.isGameController(event.getDevice()) && super.dispatchKeyEvent(event));\r\n    }\r\n\r\n    public InputControlsView getInputControlsView() {\r\n        return inputControlsView;\r\n    }\r\n\r\n    private void generateWineprefix() {\r\n        Intent intent = getIntent();\r\n\r\n        final File rootDir = imageFs.getRootDir();\r\n        final File installedWineDir = imageFs.getInstalledWineDir();\r\n        wineInfo = intent.getParcelableExtra(\"wine_info\");\r\n        envVars.put(\"WINEARCH\", wineInfo.isWin64() ? \"win64\" : \"win32\");\r\n        imageFs.setWinePath(wineInfo.path);\r\n\r\n        final File containerPatternDir = new File(installedWineDir, \"/preinstall/container-pattern\");\r\n        if (containerPatternDir.isDirectory()) FileUtils.delete(containerPatternDir);\r\n        containerPatternDir.mkdirs();\r\n\r\n        File linkFile = new File(rootDir, ImageFs.HOME_PATH);\r\n        linkFile.delete();\r\n        FileUtils.symlink(\"..\"+FileUtils.toRelativePath(rootDir.getPath(), containerPatternDir.getPath()), linkFile.getPath());\r\n\r\n        GuestProgramLauncherComponent guestProgramLauncherComponent = environment.getComponent(GuestProgramLauncherComponent.class);\r\n//        guestProgramLauncherComponent.setGuestExecutable(wineInfo.getExecutable(this, false)+\" explorer /desktop=shell,\"+Container.DEFAULT_SCREEN_SIZE+\" winecfg\");\r\n        guestProgramLauncherComponent.setGuestExecutable(\"wine explorer /desktop=shell,\"+Container.DEFAULT_SCREEN_SIZE+\" winecfg\");\r\n\r\n        final PreloaderDialog preloaderDialog = new PreloaderDialog(this);\r\n        guestProgramLauncherComponent.setTerminationCallback((status) -> Executors.newSingleThreadExecutor().execute(() -> {\r\n            if (status > 0) {\r\n                AppUtils.showToast(this, R.string.unable_to_install_wine);\r\n                FileUtils.delete(new File(installedWineDir, \"/preinstall\"));\r\n                AppUtils.restartApplication(this);\r\n                return;\r\n            }\r\n\r\n            preloaderDialog.showOnUiThread(R.string.finishing_installation);\r\n            FileUtils.writeString(new File(rootDir, ImageFs.WINEPREFIX+\"/.update-timestamp\"), \"disable\\n\");\r\n\r\n            File userDir = new File(rootDir, ImageFs.WINEPREFIX+\"/drive_c/users/xuser\");\r\n            File[] userFiles = userDir.listFiles();\r\n            if (userFiles != null) {\r\n                for (File userFile : userFiles) {\r\n                    if (FileUtils.isSymlink(userFile)) {\r\n                        String path = userFile.getPath();\r\n                        userFile.delete();\r\n                        (new File(path)).mkdirs();\r\n                    }\r\n                }\r\n            }\r\n\r\n            String suffix = wineInfo.fullVersion()+\"-\"+wineInfo.getArch();\r\n            File containerPatternFile = new File(installedWineDir, \"/preinstall/container-pattern-\"+suffix+\".tzst\");\r\n            TarCompressorUtils.compress(TarCompressorUtils.Type.ZSTD, new File(rootDir, ImageFs.WINEPREFIX), containerPatternFile, MainActivity.CONTAINER_PATTERN_COMPRESSION_LEVEL);\r\n\r\n            if (!containerPatternFile.renameTo(new File(installedWineDir, containerPatternFile.getName())) ||\r\n                    !(new File(wineInfo.path)).renameTo(new File(installedWineDir, wineInfo.identifier()))) {\r\n                containerPatternFile.delete();\r\n            }\r\n\r\n            FileUtils.delete(new File(installedWineDir, \"/preinstall\"));\r\n\r\n            preloaderDialog.closeOnUiThread();\r\n            AppUtils.restartApplication(this, R.id.main_menu_settings);\r\n        }));\r\n    }\r\n\r\n    private void extractDXWrapperFiles(String dxwrapper) {\r\n        final String[] dlls = {\"d3d10.dll\", \"d3d10_1.dll\", \"d3d10core.dll\", \"d3d11.dll\", \"d3d12.dll\", \"d3d12core.dll\", \"d3d8.dll\", \"d3d9.dll\", \"dxgi.dll\", \"ddraw.dll\"};\r\n        if (firstTimeBoot && !dxwrapper.equals(\"vkd3d\")) cloneOriginalDllFiles(dlls);\r\n        File rootDir = imageFs.getRootDir();\r\n        File windowsDir = new File(rootDir, ImageFs.WINEPREFIX+\"/drive_c/windows\");\r\n\r\n        switch (dxwrapper) {\r\n            case \"wined3d\":\r\n                restoreOriginalDllFiles(dlls);\r\n                break;\r\n            case \"cnc-ddraw\":\r\n                restoreOriginalDllFiles(dlls);\r\n                final String assetDir = \"dxwrapper/cnc-ddraw-\"+DefaultVersion.CNC_DDRAW;\r\n                File configFile = new File(rootDir, ImageFs.WINEPREFIX+\"/drive_c/ProgramData/cnc-ddraw/ddraw.ini\");\r\n                if (!configFile.isFile()) FileUtils.copy(this, assetDir+\"/ddraw.ini\", configFile);\r\n                File shadersDir = new File(rootDir, ImageFs.WINEPREFIX+\"/drive_c/ProgramData/cnc-ddraw/Shaders\");\r\n                FileUtils.delete(shadersDir);\r\n                FileUtils.copy(this, assetDir+\"/Shaders\", shadersDir);\r\n                TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, assetDir+\"/ddraw.tzst\", windowsDir, onExtractFileListener);\r\n                break;\r\n            case \"vkd3d\":\r\n                // FIXME: maybe we need first boot config here\r\n                TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"dxwrapper/dxvk-\"+DefaultVersion.DXVK+\".tzst\", windowsDir, onExtractFileListener);\r\n                TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"dxwrapper/vkd3d-\"+DefaultVersion.VKD3D+\".tzst\", windowsDir, onExtractFileListener);\r\n                break;\r\n            default:\r\n                if (dxwrapper.startsWith(\"dxvk\")) {\r\n                    restoreOriginalDllFiles(\"d3d12.dll\", \"d3d12core.dll\", \"ddraw.dll\");\r\n                    ContentProfile profile = contentsManager.getProfileByEntryName(dxwrapper);\r\n                    if (profile != null)\r\n                        contentsManager.applyContent(profile);\r\n                    else {\r\n                        TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"dxwrapper/\" + dxwrapper + \".tzst\", windowsDir, onExtractFileListener);\r\n                        // d8vk merged into dxvk since dxvk-2.4, so we don't need to extract d8vk after that\r\n                        if (compareVersion(StringUtils.parseNumber(dxwrapper), \"2.4\") < 0)\r\n                            TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"dxwrapper/d8vk-\" + DefaultVersion.D8VK + \".tzst\", windowsDir, onExtractFileListener);\r\n                    }\r\n                } else if (dxwrapper.startsWith(\"vkd3d\")) {\r\n                    ContentProfile profile = contentsManager.getProfileByEntryName(dxwrapper);\r\n                    if (profile != null)\r\n                        contentsManager.applyContent(profile);\r\n                    else\r\n                        TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"dxwrapper/\" + dxwrapper + \".tzst\", windowsDir, onExtractFileListener);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    private static int compareVersion(String varA, String varB) {\r\n        final String[] levelsA = varA.split(\"\\\\.\");\r\n        final String[] levelsB = varB.split(\"\\\\.\");\r\n        int minLen = Math.min(levelsA.length, levelsB.length);\r\n        int numA, numB;\r\n\r\n        for (int i = 0; i < minLen; i++) {\r\n            numA = Integer.parseInt(levelsA[i]);\r\n            numB = Integer.parseInt(levelsB[i]);\r\n            if (numA != numB)\r\n                return numA - numB;\r\n        }\r\n\r\n        if (levelsA.length != levelsB.length)\r\n            return levelsA.length - levelsB.length;\r\n\r\n        return 0;\r\n    }\r\n\r\n    private void extractWinComponentFiles() {\r\n        File rootDir = imageFs.getRootDir();\r\n        File windowsDir = new File(rootDir, ImageFs.WINEPREFIX+\"/drive_c/windows\");\r\n        File systemRegFile = new File(rootDir, ImageFs.WINEPREFIX+\"/system.reg\");\r\n\r\n        try {\r\n            JSONObject wincomponentsJSONObject = new JSONObject(FileUtils.readString(this, \"wincomponents/wincomponents.json\"));\r\n            ArrayList<String> dlls = new ArrayList<>();\r\n            String wincomponents = shortcut != null ? shortcut.getExtra(\"wincomponents\", container.getWinComponents()) : container.getWinComponents();\r\n\r\n            if (firstTimeBoot) {\r\n                for (String[] wincomponent : new KeyValueSet(wincomponents)) {\r\n                    JSONArray dlnames = wincomponentsJSONObject.getJSONArray(wincomponent[0]);\r\n                    for (int i = 0; i < dlnames.length(); i++) {\r\n                        String dlname = dlnames.getString(i);\r\n                        dlls.add(!dlname.endsWith(\".exe\") ? dlname+\".dll\" : dlname);\r\n                    }\r\n                }\r\n\r\n                cloneOriginalDllFiles(dlls.toArray(new String[0]));\r\n                dlls.clear();\r\n            }\r\n\r\n            Iterator<String[]> oldWinComponentsIter = new KeyValueSet(container.getExtra(\"wincomponents\", Container.FALLBACK_WINCOMPONENTS)).iterator();\r\n\r\n            for (String[] wincomponent : new KeyValueSet(wincomponents)) {\r\n                if (wincomponent[1].equals(oldWinComponentsIter.next()[1])) continue;\r\n                String identifier = wincomponent[0];\r\n                boolean useNative = wincomponent[1].equals(\"1\");\r\n\r\n                if (useNative) {\r\n                    TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"wincomponents/\"+identifier+\".tzst\", windowsDir, onExtractFileListener);\r\n                }\r\n                else {\r\n                    JSONArray dlnames = wincomponentsJSONObject.getJSONArray(identifier);\r\n                    for (int i = 0; i < dlnames.length(); i++) {\r\n                        String dlname = dlnames.getString(i);\r\n                        dlls.add(!dlname.endsWith(\".exe\") ? dlname+\".dll\" : dlname);\r\n                    }\r\n                }\r\n\r\n                WineUtils.setWinComponentRegistryKeys(systemRegFile, identifier, useNative);\r\n            }\r\n\r\n            if (!dlls.isEmpty()) restoreOriginalDllFiles(dlls.toArray(new String[0]));\r\n            WineUtils.overrideWinComponentDlls(this, container, wincomponents);\r\n        }\r\n        catch (JSONException e) {}\r\n    }\r\n\r\n    private void restoreOriginalDllFiles(final String... dlls) {\r\n        File rootDir = imageFs.getRootDir();\r\n        File cacheDir = new File(rootDir, ImageFs.CACHE_PATH+\"/original_dlls\");\r\n        if (cacheDir.isDirectory()) {\r\n            File windowsDir = new File(rootDir, ImageFs.WINEPREFIX+\"/drive_c/windows\");\r\n            String[] dirnames = cacheDir.list();\r\n            int filesCopied = 0;\r\n\r\n            for (String dll : dlls) {\r\n                boolean success = false;\r\n                for (String dirname : dirnames) {\r\n                    File srcFile = new File(cacheDir, dirname+\"/\"+dll);\r\n                    File dstFile = new File(windowsDir, dirname+\"/\"+dll);\r\n                    if (FileUtils.copy(srcFile, dstFile)) success = true;\r\n                }\r\n                if (success) filesCopied++;\r\n            }\r\n\r\n            if (filesCopied == dlls.length) return;\r\n        }\r\n\r\n        containerManager.extractContainerPatternFile(container.getWineVersion(), container.getRootDir(), (file, size) -> {\r\n            String path = file.getPath();\r\n            if (path.contains(\"system32/\") || path.contains(\"syswow64/\")) {\r\n                for (String dll : dlls) {\r\n                    if (path.endsWith(\"system32/\"+dll) || path.endsWith(\"syswow64/\"+dll)) return file;\r\n                }\r\n            }\r\n            return null;\r\n        });\r\n\r\n        cloneOriginalDllFiles(dlls);\r\n    }\r\n\r\n    private void cloneOriginalDllFiles(final String... dlls) {\r\n        File rootDir = imageFs.getRootDir();\r\n        File cacheDir = new File(rootDir, ImageFs.CACHE_PATH+\"/original_dlls\");\r\n        if (!cacheDir.isDirectory()) cacheDir.mkdirs();\r\n        File windowsDir = new File(rootDir, ImageFs.WINEPREFIX+\"/drive_c/windows\");\r\n        String[] dirnames = {\"system32\", \"syswow64\"};\r\n\r\n        for (String dll : dlls) {\r\n            for (String dirname : dirnames) {\r\n                File dllFile = new File(windowsDir, dirname+\"/\"+dll);\r\n                if (dllFile.isFile()) FileUtils.copy(dllFile, new File(cacheDir, dirname+\"/\"+dll));\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean isGenerateWineprefix() {\r\n        return getIntent().getBooleanExtra(\"generate_wineprefix\", false);\r\n    }\r\n\r\n    private String getWineStartCommand() {\r\n        File tempDir = new File(container.getRootDir(), \".wine/drive_c/windows/temp\");\r\n        FileUtils.clear(tempDir);\r\n\r\n        String args = \"\";\r\n        if (shortcut != null) {\r\n            String execArgs = shortcut.getExtra(\"execArgs\");\r\n            execArgs = !execArgs.isEmpty() ? \" \"+execArgs : \"\";\r\n\r\n            if (shortcut.path.endsWith(\".lnk\")) {\r\n                args += \"\\\"\"+shortcut.path+\"\\\"\"+execArgs;\r\n            }\r\n            else {\r\n                String exeDir = FileUtils.getDirname(shortcut.path);\r\n                String filename = FileUtils.getName(shortcut.path);\r\n                int dotIndex, spaceIndex;\r\n                if ((dotIndex = filename.lastIndexOf(\".\")) != -1 && (spaceIndex = filename.indexOf(\" \", dotIndex)) != -1) {\r\n                    execArgs = filename.substring(spaceIndex+1)+execArgs;\r\n                    filename = filename.substring(0, spaceIndex);\r\n                }\r\n                args += \"/dir \"+exeDir.replace(\" \", \"\\\\ \")+\" \\\"\"+filename+\"\\\"\"+execArgs;\r\n            }\r\n        }\r\n        else args += \"\\\"wfm.exe\\\"\";\r\n\r\n        return \"winhandler.exe \"+args;\r\n    }\r\n\r\n    public XServer getXServer() {\r\n        return xServer;\r\n    }\r\n\r\n    public WinHandler getWinHandler() {\r\n        return winHandler;\r\n    }\r\n\r\n    public XServerView getXServerView() {\r\n        return xServerView;\r\n    }\r\n\r\n    public Container getContainer() {\r\n        return container;\r\n    }\r\n\r\n    private void changeWineAudioDriver() {\r\n        if (!audioDriver.equals(container.getExtra(\"audioDriver\"))) {\r\n            File rootDir = imageFs.getRootDir();\r\n            File userRegFile = new File(rootDir, ImageFs.WINEPREFIX+\"/user.reg\");\r\n            try (WineRegistryEditor registryEditor = new WineRegistryEditor(userRegFile)) {\r\n                if (audioDriver.equals(\"alsa\")) {\r\n                    registryEditor.setStringValue(\"Software\\\\Wine\\\\Drivers\", \"Audio\", \"alsa\");\r\n                }\r\n                else if (audioDriver.equals(\"pulseaudio\")) {\r\n                    registryEditor.setStringValue(\"Software\\\\Wine\\\\Drivers\", \"Audio\", \"pulse\");\r\n                }\r\n            }\r\n            container.putExtra(\"audioDriver\", audioDriver);\r\n            container.saveData();\r\n        }\r\n    }\r\n\r\n    private void applyGeneralPatches(Container container) {\r\n        File rootDir = imageFs.getRootDir();\r\n        FileUtils.delete(new File(rootDir, \"/opt/apps\"));\r\n        TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"imagefs_patches.tzst\", rootDir, onExtractFileListener);\r\n        TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, \"pulseaudio.tzst\", new File(getFilesDir(), \"pulseaudio\"));\r\n        WineUtils.applySystemTweaks(this, wineInfo);\r\n        container.putExtra(\"graphicsDriver\", null);\r\n        container.putExtra(\"desktopTheme\", null);\r\n        SettingsFragment.resetBox86_64Version(this);\r\n    }\r\n\r\n    private void assignTaskAffinity(Window window) {\r\n        if (taskAffinityMask == 0) return;\r\n        int processId = window.getProcessId();\r\n        String className = window.getClassName();\r\n        int processAffinity = window.isWoW64() ? taskAffinityMaskWoW64 : taskAffinityMask;\r\n\r\n        if (processId > 0) {\r\n            winHandler.setProcessAffinity(processId, processAffinity);\r\n        }\r\n        else if (!className.isEmpty()) {\r\n            winHandler.setProcessAffinity(window.getClassName(), processAffinity);\r\n        }\r\n    }\r\n\r\n    private void changeFrameRatingVisibility(Window window, Property property) {\r\n        if (frameRating == null) return;\r\n        if (property != null) {\r\n            if (frameRatingWindowId == -1 && window.attributes.isMapped() && property.nameAsString().equals(\"_MESA_DRV\")) {\r\n                frameRatingWindowId = window.id;\r\n            }\r\n        }\r\n        else if (window.id == frameRatingWindowId) {\r\n            frameRatingWindowId = -1;\r\n            runOnUiThread(() -> frameRating.setVisibility(View.GONE));\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/winlator/XServerDisplayActivity.java b/src/main/java/com/winlator/XServerDisplayActivity.java
--- a/src/main/java/com/winlator/XServerDisplayActivity.java	
+++ b/src/main/java/com/winlator/XServerDisplayActivity.java	
@@ -733,8 +733,8 @@
         }
 
         boolean changed = !cacheId.equals(container.getExtra("graphicsDriver"));
-        String cacheId = container.getExtra("graphicsDriver");
-        boolean changed = !cacheId.equals(graphicsDriver);
+        cacheId = container.getExtra("graphicsDriver");
+        changed = !cacheId.equals(graphicsDriver);
         File rootDir = imageFs.getRootDir();
 
         if (changed) {
Index: src/main/java/com/winlator/ContainerDetailFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.winlator;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.DocumentsContract;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.CheckBox;\r\nimport android.widget.EditText;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.preference.PreferenceManager;\r\n\r\nimport com.winlator.box86_64.Box86_64Preset;\r\nimport com.winlator.box86_64.Box86_64PresetManager;\r\nimport com.winlator.box86_64.rc.RCManager;\r\nimport com.winlator.container.Container;\r\nimport com.winlator.container.ContainerManager;\r\nimport com.winlator.contentdialog.AddEnvVarDialog;\r\nimport com.winlator.contentdialog.DXVKConfigDialog;\r\nimport com.winlator.contentdialog.GraphicsDriverConfigDialog;\r\nimport com.winlator.contentdialog.VKD3DConfigDialog;\r\nimport com.winlator.contents.ContentProfile;\r\nimport com.winlator.contents.ContentsManager;\r\nimport com.winlator.core.AppUtils;\r\nimport com.winlator.core.Callback;\r\nimport com.winlator.core.DefaultVersion;\r\nimport com.winlator.core.EnvVars;\r\nimport com.winlator.core.FileUtils;\r\nimport com.winlator.core.KeyValueSet;\r\nimport com.winlator.core.PreloaderDialog;\r\nimport com.winlator.core.StringUtils;\r\nimport com.winlator.core.WineInfo;\r\nimport com.winlator.core.WineRegistryEditor;\r\nimport com.winlator.core.WineThemeManager;\r\nimport com.winlator.core.WineUtils;\r\nimport com.winlator.widget.CPUListView;\r\nimport com.winlator.widget.ColorPickerView;\r\nimport com.winlator.widget.EnvVarsView;\r\nimport com.winlator.widget.ImagePickerView;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class ContainerDetailFragment extends Fragment {\r\n    private ContainerManager manager;\r\n    private ContentsManager contentsManager;\r\n    private final int containerId;\r\n    private static Container container;\r\n    private PreloaderDialog preloaderDialog;\r\n    private JSONArray gpuCards;\r\n    private Callback<String> openDirectoryCallback;\r\n\r\n    private String graphicsDriverVersion;\r\n\r\n    private String tempGraphicsDriverVersion; // Temporary storage for the graphics driver version\r\n\r\n    public ContainerDetailFragment() {\r\n        this(0);\r\n    }\r\n\r\n    public ContainerDetailFragment(int containerId) {\r\n        this.containerId = containerId;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setHasOptionsMenu(false);\r\n        preloaderDialog = new PreloaderDialog(getActivity());\r\n\r\n        try {\r\n            gpuCards = new JSONArray(FileUtils.readString(getContext(), \"gpu_cards.json\"));\r\n        }\r\n        catch (JSONException e) {}\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        if (requestCode == MainActivity.OPEN_DIRECTORY_REQUEST_CODE && resultCode == Activity.RESULT_OK) {\r\n            if (data != null) {\r\n                String path = FileUtils.getFilePathFromUri(data.getData());\r\n                if (path != null && openDirectoryCallback != null) openDirectoryCallback.call(path);\r\n            }\r\n            openDirectoryCallback = null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        ((AppCompatActivity)getActivity()).getSupportActionBar().setTitle(isEditMode() ? R.string.edit_container : R.string.new_container);\r\n    }\r\n\r\n    public boolean isEditMode() {\r\n        return container != null;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup root, @Nullable Bundle savedInstanceState) {\r\n        final Context context = getContext();\r\n        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);\r\n        final View view = inflater.inflate(R.layout.container_detail_fragment, root, false);\r\n        manager = new ContainerManager(context);\r\n        container = containerId > 0 ? manager.getContainerById(containerId) : null;\r\n        contentsManager = new ContentsManager(context);\r\n        contentsManager.syncContents();\r\n\r\n        final EditText etName = view.findViewById(R.id.ETName);\r\n\r\n        if (isEditMode()) {\r\n            etName.setText(container.getName());\r\n            graphicsDriverVersion = container.getGraphicsDriverVersion();  // Use the existing version for editing\r\n        } else {\r\n            etName.setText(getString(R.string.container) + \"-\" + manager.getNextContainerId());\r\n//            graphicsDriverVersion = DefaultVersion.TURNIP;  // Default to the latest Turnip version for new containers\r\n        }\r\n        else etName.setText(getString(R.string.container)+\"-\"+manager.getNextContainerId());\r\n\r\n        final ArrayList<WineInfo> wineInfos = WineUtils.getInstalledWineInfos(context);\r\n        final Spinner sWineVersion = view.findViewById(R.id.SWineVersion);\r\n        //if (wineInfos.size() > 1) loadWineVersionSpinner(view, sWineVersion, wineInfos);\r\n        loadWineVersionSpinner(view, sWineVersion, wineInfos);\r\n\r\n        loadScreenSizeSpinner(view, isEditMode() ? container.getScreenSize() : Container.DEFAULT_SCREEN_SIZE);\r\n\r\n        final Spinner sGraphicsDriver = view.findViewById(R.id.SGraphicsDriver);\r\n        final Spinner sDXWrapper = view.findViewById(R.id.SDXWrapper);\r\n\r\n        final View vDXWrapperConfig = view.findViewById(R.id.BTDXWrapperConfig);\r\n        vDXWrapperConfig.setTag(isEditMode() ? container.getDXWrapperConfig() : \"\");\r\n\r\n        final View vGraphicsDriverConfig = view.findViewById(R.id.BTGraphicsDriverConfig);\r\n\r\n        setupDXWrapperSpinner(sDXWrapper, vDXWrapperConfig);\r\n        loadGraphicsDriverSpinner(sGraphicsDriver, sDXWrapper, vGraphicsDriverConfig,\r\n                isEditMode() ? container.getGraphicsDriver() : Container.DEFAULT_GRAPHICS_DRIVER,\r\n                isEditMode() ? container.getDXWrapper() : Container.DEFAULT_DXWRAPPER);\r\n\r\n        view.findViewById(R.id.BTHelpDXWrapper).setOnClickListener((v) -> AppUtils.showHelpBox(context, v, R.string.dxwrapper_help_content));\r\n\r\n        Spinner sAudioDriver = view.findViewById(R.id.SAudioDriver);\r\n        AppUtils.setSpinnerSelectionFromIdentifier(sAudioDriver, isEditMode() ? container.getAudioDriver() : Container.DEFAULT_AUDIO_DRIVER);\r\n\r\n        final CheckBox cbShowFPS = view.findViewById(R.id.CBShowFPS);\r\n        cbShowFPS.setChecked(isEditMode() && container.isShowFPS());\r\n\r\n        final CheckBox cbWoW64Mode = view.findViewById(R.id.CBWoW64Mode);\r\n        cbWoW64Mode.setChecked(!isEditMode() || container.isWoW64Mode());\r\n\r\n        final Spinner sStartupSelection = view.findViewById(R.id.SStartupSelection);\r\n        byte previousStartupSelection = isEditMode() ? container.getStartupSelection() : -1;\r\n        sStartupSelection.setSelection(previousStartupSelection != -1 ? previousStartupSelection : Container.STARTUP_SELECTION_ESSENTIAL);\r\n\r\n        final Spinner sBox86Preset = view.findViewById(R.id.SBox86Preset);\r\n        Box86_64PresetManager.loadSpinner(\"box86\", sBox86Preset, isEditMode() ? container.getBox86Preset() : preferences.getString(\"box86_preset\", Box86_64Preset.COMPATIBILITY));\r\n\r\n        final Spinner sBox64Preset = view.findViewById(R.id.SBox64Preset);\r\n        Box86_64PresetManager.loadSpinner(\"box64\", sBox64Preset, isEditMode() ? container.getBox64Preset() : preferences.getString(\"box64_preset\", Box86_64Preset.COMPATIBILITY));\r\n\r\n        final Spinner sRCFile = view.findViewById(R.id.SRCFile);\r\n        final int[] rcfileIds = {0};\r\n        RCManager rcManager = new RCManager(context);\r\n        RCManager.loadRCFileSpinner(rcManager, container == null ? 0 : container.getRCFileId(), sRCFile, id -> rcfileIds[0] = id);\r\n\r\n        final CPUListView cpuListView = view.findViewById(R.id.CPUListView);\r\n        final CPUListView cpuListViewWoW64 = view.findViewById(R.id.CPUListViewWoW64);\r\n\r\n        cpuListView.setCheckedCPUList(isEditMode() ? container.getCPUList(true) : Container.getFallbackCPUList());\r\n        cpuListViewWoW64.setCheckedCPUList(isEditMode() ? container.getCPUListWoW64(true) : Container.getFallbackCPUListWoW64());\r\n\r\n        createWineConfigurationTab(view);\r\n        final EnvVarsView envVarsView = createEnvVarsTab(view);\r\n        createWinComponentsTab(view, isEditMode() ? container.getWinComponents() : Container.DEFAULT_WINCOMPONENTS);\r\n        createDrivesTab(view);\r\n\r\n        AppUtils.setupTabLayout(view, R.id.TabLayout, R.id.LLTabWineConfiguration, R.id.LLTabWinComponents, R.id.LLTabEnvVars, R.id.LLTabDrives, R.id.LLTabAdvanced);\r\n\r\n        view.findViewById(R.id.BTConfirm).setOnClickListener((v) -> {\r\n            try {\r\n                String name = etName.getText().toString();\r\n                String screenSize = getScreenSize(view);\r\n                String envVars = envVarsView.getEnvVars();\r\n                String graphicsDriver = StringUtils.parseIdentifier(sGraphicsDriver.getSelectedItem());\r\n                String dxwrapper = StringUtils.parseIdentifier(sDXWrapper.getSelectedItem());\r\n                String dxwrapperConfig = vDXWrapperConfig.getTag().toString();\r\n                String audioDriver = StringUtils.parseIdentifier(sAudioDriver.getSelectedItem());\r\n                String wincomponents = getWinComponents(view);\r\n                String drives = getDrives(view);\r\n                boolean showFPS = cbShowFPS.isChecked();\r\n                String cpuList = cpuListView.getCheckedCPUListAsString();\r\n                String cpuListWoW64 = cpuListViewWoW64.getCheckedCPUListAsString();\r\n                boolean wow64Mode = cbWoW64Mode.isChecked();\r\n                byte startupSelection = (byte) sStartupSelection.getSelectedItemPosition();\r\n                String box86Preset = Box86_64PresetManager.getSpinnerSelectedId(sBox86Preset);\r\n                String box64Preset = Box86_64PresetManager.getSpinnerSelectedId(sBox64Preset);\r\n                String desktopTheme = getDesktopTheme(view);\r\n                int rcfileId = rcfileIds[0];\r\n\r\n                if (isEditMode()) {\r\n                    container.setName(name);\r\n                    container.setScreenSize(screenSize);\r\n                    container.setEnvVars(envVars);\r\n                    container.setCPUList(cpuList);\r\n                    container.setCPUListWoW64(cpuListWoW64);\r\n                    container.setGraphicsDriver(graphicsDriver);\r\n                    container.setGraphicsDriverVersion(graphicsDriverVersion); // Set the updated version here\r\n                    container.setDXWrapper(dxwrapper);\r\n                    container.setDXWrapperConfig(dxwrapperConfig);\r\n                    container.setAudioDriver(audioDriver);\r\n                    container.setWinComponents(wincomponents);\r\n                    container.setDrives(drives);\r\n                    container.setShowFPS(showFPS);\r\n                    container.setWoW64Mode(wow64Mode);\r\n                    container.setStartupSelection(startupSelection);\r\n                    container.setBox86Preset(box86Preset);\r\n                    container.setBox64Preset(box64Preset);\r\n                    container.setDesktopTheme(desktopTheme);\r\n                    container.setRcfileId(rcfileId);\r\n                    container.saveData();\r\n                    saveWineRegistryKeys(view);\r\n                    getActivity().onBackPressed();\r\n                } else {\r\n                    JSONObject data = new JSONObject();\r\n                    data.put(\"name\", name);\r\n                    data.put(\"screenSize\", screenSize);\r\n                    data.put(\"envVars\", envVars);\r\n                    data.put(\"cpuList\", cpuList);\r\n                    data.put(\"cpuListWoW64\", cpuListWoW64);\r\n                    data.put(\"graphicsDriver\", graphicsDriver);\r\n                    data.put(\"dxwrapper\", dxwrapper);\r\n                    data.put(\"dxwrapperConfig\", dxwrapperConfig);\r\n                    data.put(\"audioDriver\", audioDriver);\r\n                    data.put(\"wincomponents\", wincomponents);\r\n                    data.put(\"drives\", drives);\r\n                    data.put(\"showFPS\", showFPS);\r\n                    data.put(\"wow64Mode\", wow64Mode);\r\n                    data.put(\"startupSelection\", startupSelection);\r\n                    data.put(\"box86Preset\", box86Preset);\r\n                    data.put(\"box64Preset\", box64Preset);\r\n                    data.put(\"desktopTheme\", desktopTheme);\r\n                    data.put(\"rcfileId\", rcfileId);\r\n                    data.put(\"wineVersion\", sWineVersion.getSelectedItem().toString());\r\n\r\n                    preloaderDialog.show(R.string.creating_container);\r\n                    manager.createContainerAsync(data, (container) -> {\r\n                        if (container != null) {\r\n                            this.container = container;\r\n                            saveWineRegistryKeys(view);\r\n                        }\r\n                        preloaderDialog.close();\r\n                        getActivity().onBackPressed();\r\n                    });\r\n                }\r\n            }\r\n            catch (JSONException e) {}\r\n        });\r\n        return view;\r\n    }\r\n\r\n    private void saveWineRegistryKeys(View view) {\r\n        File userRegFile = new File(container.getRootDir(), \".wine/user.reg\");\r\n        try (WineRegistryEditor registryEditor = new WineRegistryEditor(userRegFile)) {\r\n            Spinner sCSMT = view.findViewById(R.id.SCSMT);\r\n            registryEditor.setDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"csmt\", sCSMT.getSelectedItemPosition() != 0 ? 3 : 0);\r\n\r\n            Spinner sGPUName = view.findViewById(R.id.SGPUName);\r\n            try {\r\n                JSONObject gpuName = gpuCards.getJSONObject(sGPUName.getSelectedItemPosition());\r\n                registryEditor.setDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"VideoPciDeviceID\", gpuName.getInt(\"deviceID\"));\r\n                registryEditor.setDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"VideoPciVendorID\", gpuName.getInt(\"vendorID\"));\r\n            }\r\n            catch (JSONException e) {}\r\n\r\n            Spinner sOffscreenRenderingMode = view.findViewById(R.id.SOffscreenRenderingMode);\r\n            registryEditor.setStringValue(\"Software\\\\Wine\\\\Direct3D\", \"OffScreenRenderingMode\", sOffscreenRenderingMode.getSelectedItem().toString().toLowerCase(Locale.ENGLISH));\r\n\r\n            Spinner sStrictShaderMath = view.findViewById(R.id.SStrictShaderMath);\r\n            registryEditor.setDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"strict_shader_math\", sStrictShaderMath.getSelectedItemPosition());\r\n\r\n            Spinner sVideoMemorySize = view.findViewById(R.id.SVideoMemorySize);\r\n            registryEditor.setStringValue(\"Software\\\\Wine\\\\Direct3D\", \"VideoMemorySize\", StringUtils.parseNumber(sVideoMemorySize.getSelectedItem()));\r\n\r\n            Spinner sMouseWarpOverride = view.findViewById(R.id.SMouseWarpOverride);\r\n            registryEditor.setStringValue(\"Software\\\\Wine\\\\DirectInput\", \"MouseWarpOverride\", sMouseWarpOverride.getSelectedItem().toString().toLowerCase(Locale.ENGLISH));\r\n\r\n            registryEditor.setStringValue(\"Software\\\\Wine\\\\Direct3D\", \"shader_backend\", \"glsl\");\r\n            registryEditor.setStringValue(\"Software\\\\Wine\\\\Direct3D\", \"UseGLSL\", \"enabled\");\r\n        }\r\n    }\r\n\r\n    private void createWineConfigurationTab(View view) {\r\n        Context context = getContext();\r\n\r\n        WineThemeManager.ThemeInfo desktopTheme = new WineThemeManager.ThemeInfo(isEditMode() ? container.getDesktopTheme() : WineThemeManager.DEFAULT_DESKTOP_THEME);\r\n        Spinner sDesktopTheme = view.findViewById(R.id.SDesktopTheme);\r\n        sDesktopTheme.setSelection(desktopTheme.theme.ordinal());\r\n        final ImagePickerView ipvDesktopBackgroundImage = view.findViewById(R.id.IPVDesktopBackgroundImage);\r\n        final ColorPickerView cpvDesktopBackgroundColor = view.findViewById(R.id.CPVDesktopBackgroundColor);\r\n        cpvDesktopBackgroundColor.setColor(desktopTheme.backgroundColor);\r\n\r\n        Spinner sDesktopBackgroundType = view.findViewById(R.id.SDesktopBackgroundType);\r\n        sDesktopBackgroundType.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                WineThemeManager.BackgroundType type = WineThemeManager.BackgroundType.values()[position];\r\n                ipvDesktopBackgroundImage.setVisibility(View.GONE);\r\n                cpvDesktopBackgroundColor.setVisibility(View.GONE);\r\n\r\n                if (type == WineThemeManager.BackgroundType.IMAGE) {\r\n                    ipvDesktopBackgroundImage.setVisibility(View.VISIBLE);\r\n                }\r\n                else if (type == WineThemeManager.BackgroundType.COLOR) {\r\n                    cpvDesktopBackgroundColor.setVisibility(View.VISIBLE);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {}\r\n        });\r\n        sDesktopBackgroundType.setSelection(desktopTheme.backgroundType.ordinal());\r\n\r\n        File containerDir = isEditMode() ? container.getRootDir() : null;\r\n        File userRegFile = new File(containerDir, \".wine/user.reg\");\r\n\r\n        try (WineRegistryEditor registryEditor = new WineRegistryEditor(userRegFile)) {\r\n            List<String> stateList = Arrays.asList(context.getString(R.string.disable), context.getString(R.string.enable));\r\n            Spinner sCSMT = view.findViewById(R.id.SCSMT);\r\n            sCSMT.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, stateList));\r\n            sCSMT.setSelection(registryEditor.getDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"csmt\", 3) != 0 ? 1 : 0);\r\n\r\n            Spinner sGPUName = view.findViewById(R.id.SGPUName);\r\n            loadGPUNameSpinner(sGPUName, registryEditor.getDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"VideoPciDeviceID\", 1728));\r\n\r\n            List<String> offscreenRenderingModeList = Arrays.asList(\"Backbuffer\", \"FBO\");\r\n            Spinner sOffscreenRenderingMode = view.findViewById(R.id.SOffscreenRenderingMode);\r\n            sOffscreenRenderingMode.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, offscreenRenderingModeList));\r\n            AppUtils.setSpinnerSelectionFromValue(sOffscreenRenderingMode, registryEditor.getStringValue(\"Software\\\\Wine\\\\Direct3D\", \"OffScreenRenderingMode\", \"fbo\"));\r\n\r\n            Spinner sStrictShaderMath = view.findViewById(R.id.SStrictShaderMath);\r\n            sStrictShaderMath.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, stateList));\r\n            sStrictShaderMath.setSelection(Math.min(registryEditor.getDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"strict_shader_math\", 1), 1));\r\n\r\n            Spinner sVideoMemorySize = view.findViewById(R.id.SVideoMemorySize);\r\n            String videoMemorySize = registryEditor.getStringValue(\"Software\\\\Wine\\\\Direct3D\", \"VideoMemorySize\", \"2048\");\r\n            AppUtils.setSpinnerSelectionFromNumber(sVideoMemorySize, videoMemorySize);\r\n\r\n            List<String> mouseWarpOverrideList = Arrays.asList(context.getString(R.string.disable), context.getString(R.string.enable), context.getString(R.string.force));\r\n            Spinner sMouseWarpOverride = view.findViewById(R.id.SMouseWarpOverride);\r\n            sMouseWarpOverride.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, mouseWarpOverrideList));\r\n            AppUtils.setSpinnerSelectionFromValue(sMouseWarpOverride, registryEditor.getStringValue(\"Software\\\\Wine\\\\DirectInput\", \"MouseWarpOverride\", \"disable\"));\r\n        }\r\n    }\r\n\r\n    private void loadGPUNameSpinner(Spinner spinner, int selectedDeviceID) {\r\n        List<String> values = new ArrayList<>();\r\n        int selectedPosition = 0;\r\n\r\n        try {\r\n            for (int i = 0; i < gpuCards.length(); i++) {\r\n                JSONObject item = gpuCards.getJSONObject(i);\r\n                if (item.getInt(\"deviceID\") == selectedDeviceID) selectedPosition = i;\r\n                values.add(item.getString(\"name\"));\r\n            }\r\n        }\r\n        catch (JSONException e) {}\r\n\r\n        spinner.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, values));\r\n        spinner.setSelection(selectedPosition);\r\n    }\r\n\r\n    public static String getScreenSize(View view) {\r\n        Spinner sScreenSize = view.findViewById(R.id.SScreenSize);\r\n        String value = sScreenSize.getSelectedItem().toString();\r\n        if (value.equalsIgnoreCase(\"custom\")) {\r\n            value = Container.DEFAULT_SCREEN_SIZE;\r\n            String strWidth = ((EditText)view.findViewById(R.id.ETScreenWidth)).getText().toString().trim();\r\n            String strHeight = ((EditText)view.findViewById(R.id.ETScreenHeight)).getText().toString().trim();\r\n            if (strWidth.matches(\"[0-9]+\") && strHeight.matches(\"[0-9]+\")) {\r\n                int width = Integer.parseInt(strWidth);\r\n                int height = Integer.parseInt(strHeight);\r\n                if ((width % 2) == 0 && (height % 2) == 0) return width+\"x\"+height;\r\n            }\r\n        }\r\n        return StringUtils.parseIdentifier(value);\r\n    }\r\n\r\n    private String getDesktopTheme(View view) {\r\n        Spinner sDesktopBackgroundType = view.findViewById(R.id.SDesktopBackgroundType);\r\n        WineThemeManager.BackgroundType type = WineThemeManager.BackgroundType.values()[sDesktopBackgroundType.getSelectedItemPosition()];\r\n        Spinner sDesktopTheme = view.findViewById(R.id.SDesktopTheme);\r\n        ColorPickerView cpvDesktopBackground = view.findViewById(R.id.CPVDesktopBackgroundColor);\r\n        WineThemeManager.Theme theme = WineThemeManager.Theme.values()[sDesktopTheme.getSelectedItemPosition()];\r\n\r\n       String desktopTheme = theme+\",\"+type+\",\"+cpvDesktopBackground.getColorAsString();\r\n        if (type == WineThemeManager.BackgroundType.IMAGE) {\r\n            File userWallpaperFile = WineThemeManager.getUserWallpaperFile(getContext());\r\n            desktopTheme += \",\"+(userWallpaperFile.isFile() ? userWallpaperFile.lastModified() : \"0\");\r\n        }\r\n        return desktopTheme;\r\n    }\r\n\r\n    public static void loadScreenSizeSpinner(View view, String selectedValue) {\r\n        final Spinner sScreenSize = view.findViewById(R.id.SScreenSize);\r\n\r\n        final LinearLayout llCustomScreenSize = view.findViewById(R.id.LLCustomScreenSize);\r\n        sScreenSize.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                String value = sScreenSize.getItemAtPosition(position).toString();\r\n                llCustomScreenSize.setVisibility(value.equalsIgnoreCase(\"custom\") ? View.VISIBLE : View.GONE);\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {}\r\n        });\r\n\r\n        boolean found = AppUtils.setSpinnerSelectionFromIdentifier(sScreenSize, selectedValue);\r\n        if (!found) {\r\n            AppUtils.setSpinnerSelectionFromValue(sScreenSize, \"custom\");\r\n            String[] screenSize = selectedValue.split(\"x\");\r\n            ((EditText)view.findViewById(R.id.ETScreenWidth)).setText(screenSize[0]);\r\n            ((EditText)view.findViewById(R.id.ETScreenHeight)).setText(screenSize[1]);\r\n        }\r\n    }\r\n\r\n    // This method shows the GraphicsDriverConfigDialog\r\n    private void showGraphicsDriverConfigDialog(View anchor) {\r\n        new GraphicsDriverConfigDialog(anchor, manager, container, graphicsDriverVersion, version -> {\r\n            // Capture the selected version\r\n            graphicsDriverVersion = version;\r\n        }).show();\r\n    }\r\n\r\n    // Original method: Used for compatibility with ShortcutSettingsDialog\r\n    public static void loadGraphicsDriverSpinner(final Spinner sGraphicsDriver, final Spinner sDXWrapper, String selectedGraphicsDriver, String selectedDXWrapper) {\r\n        final Context context = sGraphicsDriver.getContext();\r\n        final String[] dxwrapperEntries = context.getResources().getStringArray(R.array.dxwrapper_entries);\r\n\r\n        Runnable update = () -> {\r\n            String graphicsDriver = StringUtils.parseIdentifier(sGraphicsDriver.getSelectedItem());\r\n            boolean addAll = graphicsDriver.equals(\"turnip\");\r\n\r\n            ArrayList<String> items = new ArrayList<>();\r\n            for (String value : dxwrapperEntries) {\r\n                if (addAll || (!value.equals(\"DXVK\") && !value.equals(\"VKD3D\"))) {\r\n                    items.add(value);\r\n                }\r\n            }\r\n            sDXWrapper.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, items.toArray(new String[0])));\r\n            AppUtils.setSpinnerSelectionFromIdentifier(sDXWrapper, selectedDXWrapper);\r\n        };\r\n\r\n        sGraphicsDriver.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                update.run();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {}\r\n        });\r\n\r\n        AppUtils.setSpinnerSelectionFromIdentifier(sGraphicsDriver, selectedGraphicsDriver);\r\n        update.run();\r\n    }\r\n\r\n    // New method: Adds support for the GraphicsDriverConfigDialog\r\n    public void loadGraphicsDriverSpinner(final Spinner sGraphicsDriver, final Spinner sDXWrapper, final View vGraphicsDriverConfig, String selectedGraphicsDriver, String selectedDXWrapper) {\r\n        final Context context = sGraphicsDriver.getContext();\r\n        final String[] dxwrapperEntries = context.getResources().getStringArray(R.array.dxwrapper_entries);\r\n\r\n        Runnable update = () -> {\r\n            String graphicsDriver = StringUtils.parseIdentifier(sGraphicsDriver.getSelectedItem());\r\n            boolean isTurnip = graphicsDriver.equals(\"turnip\");\r\n\r\n            // Update the DXWrapper spinner\r\n            ArrayList<String> items = new ArrayList<>();\r\n            for (String value : dxwrapperEntries) {\r\n                if (isTurnip || (!value.equals(\"DXVK\") && !value.equals(\"VKD3D\"))) {\r\n                    items.add(value);\r\n                }\r\n            }\r\n            sDXWrapper.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, items.toArray(new String[0])));\r\n            AppUtils.setSpinnerSelectionFromIdentifier(sDXWrapper, selectedDXWrapper);\r\n\r\n            // Update the gear icon for the graphics driver\r\n            if (isTurnip) {\r\n                vGraphicsDriverConfig.setOnClickListener((v) -> {\r\n                    if (container != null) {\r\n                        showGraphicsDriverConfigDialog(vGraphicsDriverConfig);\r\n                    } else {\r\n                        Toast.makeText(context, \"Please save this container before attempting to change the driver version\", Toast.LENGTH_LONG).show();\r\n                    }\r\n                });\r\n                vGraphicsDriverConfig.setVisibility(View.VISIBLE);\r\n            } else {\r\n                vGraphicsDriverConfig.setVisibility(View.GONE);  // VirGL doesn't allow version selection\r\n            }\r\n        };\r\n\r\n        sGraphicsDriver.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                update.run();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {}\r\n        });\r\n\r\n        AppUtils.setSpinnerSelectionFromIdentifier(sGraphicsDriver, selectedGraphicsDriver);\r\n        update.run();\r\n    }\r\n\r\n\r\n\r\n\r\n    public static void setupDXWrapperSpinner(final Spinner sDXWrapper, final View vDXWrapperConfig) {\r\n        sDXWrapper.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                String dxwrapper = StringUtils.parseIdentifier(sDXWrapper.getSelectedItem());\r\n                if (dxwrapper.equals(\"dxvk\")) {\r\n                    vDXWrapperConfig.setOnClickListener((v) -> (new DXVKConfigDialog(vDXWrapperConfig)).show());\r\n                    vDXWrapperConfig.setVisibility(View.VISIBLE);\r\n                }\r\n                else if (dxwrapper.equals(\"vkd3d\")) {\r\n                    vDXWrapperConfig.setOnClickListener((v) -> (new VKD3DConfigDialog(vDXWrapperConfig)).show());\r\n                    vDXWrapperConfig.setVisibility(View.VISIBLE);\r\n                } else vDXWrapperConfig.setVisibility(View.GONE);\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {}\r\n        });\r\n    }\r\n\r\n    public static String getWinComponents(View view) {\r\n        ViewGroup parent = view.findViewById(R.id.LLTabWinComponents);\r\n        ArrayList<View> views = new ArrayList<>();\r\n        AppUtils.findViewsWithClass(parent, Spinner.class, views);\r\n        String[] wincomponents = new String[views.size()];\r\n\r\n        for (int i = 0; i < views.size(); i++) {\r\n            Spinner spinner = (Spinner)views.get(i);\r\n            wincomponents[i] = spinner.getTag()+\"=\"+spinner.getSelectedItemPosition();\r\n        }\r\n        return String.join(\",\", wincomponents);\r\n    }\r\n\r\n    public static void createWinComponentsTab(View view, String wincomponents) {\r\n        Context context = view.getContext();\r\n        LayoutInflater inflater = LayoutInflater.from(context);\r\n        ViewGroup tabView = view.findViewById(R.id.LLTabWinComponents);\r\n        ViewGroup directxSectionView = tabView.findViewById(R.id.LLWinComponentsDirectX);\r\n        ViewGroup generalSectionView = tabView.findViewById(R.id.LLWinComponentsGeneral);\r\n\r\n        for (String[] wincomponent : new KeyValueSet(wincomponents)) {\r\n            ViewGroup parent = wincomponent[0].startsWith(\"direct\") ? directxSectionView : generalSectionView;\r\n            View itemView = inflater.inflate(R.layout.wincomponent_list_item, parent, false);\r\n            ((TextView)itemView.findViewById(R.id.TextView)).setText(StringUtils.getString(context, wincomponent[0]));\r\n            Spinner spinner = itemView.findViewById(R.id.Spinner);\r\n            spinner.setSelection(Integer.parseInt(wincomponent[1]), false);\r\n            spinner.setTag(wincomponent[0]);\r\n            parent.addView(itemView);\r\n        }\r\n    }\r\n\r\n    private EnvVarsView createEnvVarsTab(final View view) {\r\n        final Context context = view.getContext();\r\n        final EnvVarsView envVarsView = view.findViewById(R.id.EnvVarsView);\r\n        envVarsView.setEnvVars(new EnvVars(isEditMode() ? container.getEnvVars() : Container.DEFAULT_ENV_VARS));\r\n        view.findViewById(R.id.BTAddEnvVar).setOnClickListener((v) -> (new AddEnvVarDialog(context, envVarsView)).show());\r\n        return envVarsView;\r\n    }\r\n\r\n    private String getDrives(View view) {\r\n        LinearLayout parent = view.findViewById(R.id.LLDrives);\r\n        String drives = \"\";\r\n\r\n        for (int i = 0; i < parent.getChildCount(); i++) {\r\n            View child = parent.getChildAt(i);\r\n            Spinner spinner = child.findViewById(R.id.Spinner);\r\n            EditText editText = child.findViewById(R.id.EditText);\r\n            String path = editText.getText().toString().trim();\r\n            if (!path.isEmpty()) drives += spinner.getSelectedItem()+path;\r\n        }\r\n        return drives;\r\n    }\r\n\r\n    private void createDrivesTab(View view) {\r\n        final Context context = getContext();\r\n\r\n        final LinearLayout parent = view.findViewById(R.id.LLDrives);\r\n        final View emptyTextView = view.findViewById(R.id.TVDrivesEmptyText);\r\n        LayoutInflater inflater = LayoutInflater.from(context);\r\n        final String drives = isEditMode() ? container.getDrives() : Container.DEFAULT_DRIVES;\r\n        final String[] driveLetters = new String[Container.MAX_DRIVE_LETTERS];\r\n        for (int i = 0; i < driveLetters.length; i++) driveLetters[i] = ((char)(i + 68))+\":\";\r\n\r\n        Callback<String[]> addItem = (drive) -> {\r\n            final View itemView = inflater.inflate(R.layout.drive_list_item, parent, false);\r\n            Spinner spinner = itemView.findViewById(R.id.Spinner);\r\n            spinner.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, driveLetters));\r\n            AppUtils.setSpinnerSelectionFromValue(spinner, drive[0]+\":\");\r\n\r\n            final EditText editText = itemView.findViewById(R.id.EditText);\r\n            editText.setText(drive[1]);\r\n\r\n            itemView.findViewById(R.id.BTSearch).setOnClickListener((v) -> {\r\n                openDirectoryCallback = (path) -> {\r\n                    drive[1] = path;\r\n                    editText.setText(path);\r\n                };\r\n                Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);\r\n                intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, Uri.fromFile(Environment.getExternalStorageDirectory()));\r\n                getActivity().startActivityFromFragment(this, intent, MainActivity.OPEN_DIRECTORY_REQUEST_CODE);\r\n            });\r\n\r\n            itemView.findViewById(R.id.BTRemove).setOnClickListener((v) -> {\r\n                parent.removeView(itemView);\r\n                if (parent.getChildCount() == 0) emptyTextView.setVisibility(View.VISIBLE);\r\n            });\r\n            parent.addView(itemView);\r\n        };\r\n        for (String[] drive : Container.drivesIterator(drives)) addItem.call(drive);\r\n\r\n        view.findViewById(R.id.BTAddDrive).setOnClickListener((v) -> {\r\n            if (parent.getChildCount() >= Container.MAX_DRIVE_LETTERS) return;\r\n            final String nextDriveLetter = String.valueOf(driveLetters[parent.getChildCount()].charAt(0));\r\n            addItem.call(new String[]{nextDriveLetter, \"\"});\r\n        });\r\n\r\n        if (drives.isEmpty()) emptyTextView.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    private void loadWineVersionSpinner(final View view, Spinner sWineVersion, final ArrayList<WineInfo> wineInfos) {\r\n        final Context context = getContext();\r\n        sWineVersion.setEnabled(!isEditMode());\r\n//        sWineVersion.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n//            @Override\r\n//            public void onItemSelected(AdapterView<?> parent, View v, int position, long id) {\r\n//                WineInfo wineInfo = wineInfos.get(position);\r\n//                boolean isMainWineVersion = WineInfo.isMainWineVersion(wineInfo.identifier());\r\n//                CheckBox cbWoW64Mode = view.findViewById(R.id.CBWoW64Mode);\r\n//                cbWoW64Mode.setEnabled(isMainWineVersion);\r\n//                if (!isMainWineVersion) cbWoW64Mode.setChecked(false);\r\n//            }\r\n//\r\n//            @Override\r\n//            public void onNothingSelected(AdapterView<?> parent) {}\r\n//        });\r\n//        view.findViewById(R.id.LLWineVersion).setVisibility(View.VISIBLE);\r\n//        sWineVersion.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, wineInfos));\r\n//        if (isEditMode()) AppUtils.setSpinnerSelectionFromValue(sWineVersion, WineInfo.fromIdentifier(context, container.getWineVersion()).toString());\r\n        view.findViewById(R.id.LLWineVersion).setVisibility(View.VISIBLE);\r\n        ArrayList<String> wineVersions = new ArrayList<>();\r\n        wineVersions.add(WineInfo.MAIN_WINE_VERSION.identifier());\r\n        for (ContentProfile profile : contentsManager.getProfiles(ContentProfile.ContentType.CONTENT_TYPE_WINE))\r\n            wineVersions.add(ContentsManager.getEntryName(profile));\r\n        sWineVersion.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, wineVersions));\r\n        if (isEditMode()) AppUtils.setSpinnerSelectionFromValue(sWineVersion, container.getWineVersion());\r\n    }\r\n\r\n    public static void updateGraphicsDriverSpinner(Context context, ContentsManager manager, Spinner spinner) {\r\n        String[] originalItems = context.getResources().getStringArray(R.array.graphics_driver_entries);\r\n        List<String> itemList = new ArrayList<>(Arrays.asList(originalItems));\r\n        for (ContentProfile profile : manager.getProfiles(ContentProfile.ContentType.CONTENT_TYPE_TURNIP))\r\n            itemList.add(ContentsManager.getEntryName(profile));\r\n        for (ContentProfile profile : manager.getProfiles(ContentProfile.ContentType.CONTENT_TYPE_VIRGL))\r\n            itemList.add(ContentsManager.getEntryName(profile));\r\n        spinner.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, itemList));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/winlator/ContainerDetailFragment.java b/src/main/java/com/winlator/ContainerDetailFragment.java
--- a/src/main/java/com/winlator/ContainerDetailFragment.java	
+++ b/src/main/java/com/winlator/ContainerDetailFragment.java	
@@ -139,7 +139,6 @@
             etName.setText(getString(R.string.container) + "-" + manager.getNextContainerId());
 //            graphicsDriverVersion = DefaultVersion.TURNIP;  // Default to the latest Turnip version for new containers
         }
-        else etName.setText(getString(R.string.container)+"-"+manager.getNextContainerId());
 
         final ArrayList<WineInfo> wineInfos = WineUtils.getInstalledWineInfos(context);
         final Spinner sWineVersion = view.findViewById(R.id.SWineVersion);
Index: local.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>## This file must *NOT* be checked into Version Control Systems,\r\n# as it contains information specific to your local configuration.\r\n#\r\n# Location of the SDK. This is only used by Gradle.\r\n# For customization when using a Version Control System, please read the\r\n# header note.\r\n#Sun Aug 04 09:01:45 CDT 2024\r\nsdk.dir=C\\:\\\\Users\\\\alexs\\\\AppData\\\\Local\\\\Android\\\\Sdk\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/local.properties b/local.properties
--- a/local.properties	
+++ b/local.properties	
@@ -6,3 +6,4 @@
 # header note.
 #Sun Aug 04 09:01:45 CDT 2024
 sdk.dir=C\:\\Users\\alexs\\AppData\\Local\\Android\\Sdk
+ext.kotlin_version = '1.5.21'
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>distributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-8.5-bin.zip\r\nnetworkTimeout=10000\r\nvalidateDistributionUrl=true\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties	
+++ b/gradle/wrapper/gradle-wrapper.properties	
@@ -5,3 +5,5 @@
 validateDistributionUrl=true
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
+ext.kotlin_version = "1.8.0"
+
Index: .idea/kotlinc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/kotlinc.xml b/.idea/kotlinc.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/kotlinc.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="KotlinJpsPluginSettings">
+    <option name="version" value="1.8.0" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	
+++ b/.idea/.name	
@@ -0,0 +1,1 @@
+Winlator
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"#GRADLE_LOCAL_JAVA_HOME\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveExternalAnnotations\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	
+++ b/.idea/gradle.xml	
@@ -8,6 +8,7 @@
         <option name="gradleJvm" value="#GRADLE_LOCAL_JAVA_HOME" />
         <option name="modules">
           <set>
+            <option value="$PROJECT_DIR$/.." />
             <option value="$PROJECT_DIR$" />
           </set>
         </option>
Index: .gradle/buildOutputCleanup/cache.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Mon Aug 05 16:53:36 CDT 2024\r\ngradle.version=8.5\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/.gradle/buildOutputCleanup/cache.properties b/.gradle/buildOutputCleanup/cache.properties
--- a/.gradle/buildOutputCleanup/cache.properties	
+++ b/.gradle/buildOutputCleanup/cache.properties	
@@ -1,2 +1,2 @@
-#Mon Aug 05 16:53:36 CDT 2024
-gradle.version=8.5
+#Sat Aug 17 21:52:41 CDT 2024
+gradle.version=8.6
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AndroidLayouts\">\r\n    <shared>\r\n      <config>\r\n        <target>android-28</target>\r\n      </config>\r\n    </shared>\r\n    <layouts>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/about_dialog.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/activity_file_picker.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/add_env_var_dialog.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/binding_field.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/container_detail_fragment.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/container_list_item.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/container_selection_dialog.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/container_storage_info_dialog.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/containers_fragment.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/content_dialog.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/debug_toolbar.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/dxvk_config_dialog.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/graphics_driver_config_dialog.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/input_controls_dialog.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/input_controls_fragment.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/main_activity.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/main_menu_header.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/save_edit_dialog.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/save_settings_dialog.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/saves_fragment.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/saves_list_item.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/settings_fragment.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/shortcut_list_item.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/shortcut_settings_dialog.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/layout/shortcuts_fragment.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/menu/container_popup_menu.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/menu/containers_menu.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/menu/extra_args_popup_menu.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/menu/main_menu.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/menu/open_file_popup_menu.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/menu/process_popup_menu.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/menu/save_popup_menu.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/menu/saves_menu.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/menu/shortcut_popup_menu.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/menu/xserver_menu.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n      <layout url=\"file://$PROJECT_DIR$/src/main/res/xml/file_paths.xml\">\r\n        <config>\r\n          <theme>@android:style/Theme.Material.Light</theme>\r\n        </config>\r\n      </layout>\r\n    </layouts>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"NONE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"75efcbd4-b332-4b62-bcd4-d80d932ca61a\" name=\"Changes\" comment=\"Cmod test commit\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ClangdSettings\">\r\n    <option name=\"formatViaClangd\" value=\"false\" />\r\n  </component>\r\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"device_and_snapshot_combo_box_target[DeviceId(pluginId=LocalEmulator, isTemplate=false, identifier=path=C:\\Users\\alexs\\.android\\avd\\Pixel_Fold_API_35.avd)]\" />\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"app\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"layoutResourceFile\" />\r\n        <option value=\"resourceFile\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2kG0LIcqfeDCz3ow1XkK0SVMuZr\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;Android App.app.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.cidr.known.project.marker&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.readMode.enableVisualFormatting&quot;: &quot;true&quot;,\r\n    &quot;cf.first.check.clang-format&quot;: &quot;false&quot;,\r\n    &quot;cidr.known.project.marker&quot;: &quot;true&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/alexs/Documents/Tools/Winlator/Projects/glibc/winlator/app/src/main/res/drawable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\alexs\\Documents\\Tools\\Winlator\\Projects\\glibc\\winlator\\app\\src\\main\\res\\drawable\" />\r\n      <recent name=\"C:\\Users\\alexs\\Documents\\Tools\\Winlator\\Projects\\glibc\\winlator\\app\\src\\main\\res\\menu\" />\r\n      <recent name=\"C:\\Users\\alexs\\Documents\\Tools\\Winlator\\Projects\\glibc\\winlator\\app\\src\\main\\res\\layout\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"com.winlator.saves\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"com.winlator\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"app\" type=\"AndroidRunConfigurationType\" factoryName=\"Android App\">\r\n      <module name=\"app.main\" />\r\n      <option name=\"DEPLOY\" value=\"true\" />\r\n      <option name=\"DEPLOY_APK_FROM_BUNDLE\" value=\"false\" />\r\n      <option name=\"DEPLOY_AS_INSTANT\" value=\"false\" />\r\n      <option name=\"ARTIFACT_NAME\" value=\"\" />\r\n      <option name=\"PM_INSTALL_OPTIONS\" value=\"\" />\r\n      <option name=\"ALL_USERS\" value=\"false\" />\r\n      <option name=\"ALWAYS_INSTALL_WITH_PM\" value=\"false\" />\r\n      <option name=\"CLEAR_APP_STORAGE\" value=\"false\" />\r\n      <option name=\"DYNAMIC_FEATURES_DISABLED_LIST\" value=\"\" />\r\n      <option name=\"ACTIVITY_EXTRA_FLAGS\" value=\"\" />\r\n      <option name=\"MODE\" value=\"default_activity\" />\r\n      <option name=\"CLEAR_LOGCAT\" value=\"false\" />\r\n      <option name=\"SHOW_LOGCAT_AUTOMATICALLY\" value=\"false\" />\r\n      <option name=\"TARGET_SELECTION_MODE\" value=\"DEVICE_AND_SNAPSHOT_COMBO_BOX\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_CONFIGURATION_ID\" value=\"-1\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_PROJECT_ID\" value=\"\" />\r\n      <option name=\"DEBUGGER_TYPE\" value=\"Auto\" />\r\n      <Auto>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Auto>\r\n      <Hybrid>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Hybrid>\r\n      <Java>\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Java>\r\n      <Native>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Native>\r\n      <Profilers>\r\n        <option name=\"ADVANCED_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_CONFIGURATION_NAME\" value=\"Java/Kotlin Method Sample (legacy)\" />\r\n        <option name=\"STARTUP_NATIVE_MEMORY_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"NATIVE_MEMORY_SAMPLE_RATE_BYTES\" value=\"2048\" />\r\n      </Profilers>\r\n      <option name=\"DEEP_LINK\" value=\"\" />\r\n      <option name=\"ACTIVITY_CLASS\" value=\"\" />\r\n      <option name=\"SEARCH_ACTIVITY_IN_GLOBAL_SCOPE\" value=\"false\" />\r\n      <option name=\"SKIP_ACTIVITY_VALIDATION\" value=\"false\" />\r\n      <method v=\"2\">\r\n        <option name=\"Android.Gradle.BeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"75efcbd4-b332-4b62-bcd4-d80d932ca61a\" name=\"Changes\" comment=\"\" />\r\n      <created>1722894550565</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1722894550565</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Cmod test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1723946058964</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1723946058964</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Cmod test commit\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Cmod test commit\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -193,7 +193,24 @@
     <option name="autoReloadType" value="NONE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="75efcbd4-b332-4b62-bcd4-d80d932ca61a" name="Changes" comment="Cmod test commit" />
+    <list default="true" id="75efcbd4-b332-4b62-bcd4-d80d932ca61a" name="Changes" comment="Cmod test commit">
+      <change afterPath="$PROJECT_DIR$/.idea/.name" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/kotlinc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/cache.properties" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/cache.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/file-system.probe" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/file-system.probe" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/gradle.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/gradle.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/build.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/build.gradle" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/gradle/wrapper/gradle-wrapper.properties" beforeDir="false" afterPath="$PROJECT_DIR$/gradle/wrapper/gradle-wrapper.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/local.properties" beforeDir="false" afterPath="$PROJECT_DIR$/local.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/winlator/ContainerDetailFragment.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/winlator/ContainerDetailFragment.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/winlator/MainActivity.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/winlator/MainActivity.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/winlator/XServerDisplayActivity.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/winlator/XServerDisplayActivity.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/res/values/strings.xml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/res/values/strings.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../settings.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/../settings.gradle" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -202,7 +219,7 @@
   <component name="ClangdSettings">
     <option name="formatViaClangd" value="false" />
   </component>
-  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[DeviceId(pluginId=LocalEmulator, isTemplate=false, identifier=path=C:\Users\alexs\.android\avd\Pixel_Fold_API_35.avd)]" />
+  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[DeviceId(pluginId=PhysicalDevice, isTemplate=false, identifier=serial=R5CX10LYMLW)]" />
   <component name="ExternalProjectsData">
     <projectState path="$PROJECT_DIR$">
       <ProjectState />
@@ -234,7 +251,20 @@
       </list>
     </option>
   </component>
+  <component name="Git.Merge.Settings">
+    <option name="BRANCH" value="remote/main" />
+  </component>
   <component name="Git.Settings">
+    <option name="PREVIOUS_COMMIT_AUTHORS">
+      <list>
+        <option value="coffincolors &lt;alexsmith3031@gmail.com&gt;" />
+      </list>
+    </option>
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$/.." value="cmod-glibc-branch-backup" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
   </component>
   <component name="ProblemsViewState">
@@ -252,20 +282,28 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
-    &quot;Android App.app.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.cidr.known.project.marker&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.readMode.enableVisualFormatting&quot;: &quot;true&quot;,
-    &quot;cf.first.check.clang-format&quot;: &quot;false&quot;,
-    &quot;cidr.known.project.marker&quot;: &quot;true&quot;,
-    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
-    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/alexs/Documents/Tools/Winlator/Projects/glibc/winlator/app/src/main/res/drawable&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "ASKED_ADD_EXTERNAL_FILES": "true",
+    "Android App.app.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "RunOnceActivity.cidr.known.project.marker": "true",
+    "RunOnceActivity.readMode.enableVisualFormatting": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "cf.first.check.clang-format": "false",
+    "cidr.known.project.marker": "true",
+    "com.google.services.firebase.aqiPopupShown": "true",
+    "ignore.virus.scanning.warn.message": "true",
+    "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "C:/Users/alexs/Documents/Tools/Winlator/Projects/glibc/winlator/app/src/main/res/drawable",
+    "settings.editor.selected.configurable": "AndroidSdkUpdater"
+  },
+  "keyToStringList": {
+    "kotlin-gradle-user-dirs": [
+      "C:\\Users\\alexs\\.gradle"
+    ]
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="C:\Users\alexs\Documents\Tools\Winlator\Projects\glibc\winlator\app\src\main\res\drawable" />
@@ -281,7 +319,7 @@
   </component>
   <component name="RunManager">
     <configuration name="app" type="AndroidRunConfigurationType" factoryName="Android App">
-      <module name="app.main" />
+      <module name="Winlator.app.main" />
       <option name="DEPLOY" value="true" />
       <option name="DEPLOY_APK_FROM_BUNDLE" value="false" />
       <option name="DEPLOY_AS_INSTANT" value="false" />
@@ -364,7 +402,15 @@
       <option name="project" value="LOCAL" />
       <updated>1723946058964</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="Cmod test commit">
+      <option name="closed" value="true" />
+      <created>1723946500036</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1723946500036</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
Index: ../settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>pluginManagement {\r\n    repositories {\r\n        google {\r\n            content {\r\n                includeGroupByRegex(\"com\\\\.android.*\")\r\n                includeGroupByRegex(\"com\\\\.google.*\")\r\n                includeGroupByRegex(\"androidx.*\")\r\n            }\r\n        }\r\n        mavenCentral()\r\n        gradlePluginPortal()\r\n    }\r\n}\r\ndependencyResolutionManagement {\r\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n}\r\n\r\nrootProject.name = \"Winlator\"\r\ninclude ':app'\r\n
===================================================================
diff --git a/../settings.gradle b/../settings.gradle
--- a/../settings.gradle	
+++ b/../settings.gradle	
@@ -1,16 +1,14 @@
 pluginManagement {
     repositories {
-        google {
-            content {
-                includeGroupByRegex("com\\.android.*")
-                includeGroupByRegex("com\\.google.*")
-                includeGroupByRegex("androidx.*")
-            }
-        }
+        google()
         mavenCentral()
         gradlePluginPortal()
     }
+    plugins {
+        id "org.jetbrains.kotlin.android" version "1.5.31" // Ensure that you specify the version here
+    }
 }
+
 dependencyResolutionManagement {
     repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
     repositories {
