Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>buildscript {\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:8.1.2'\r\n    }\r\n}\r\n\r\napply plugin: 'com.android.application'\r\nplugins {\r\n    alias(libs.plugins.android.application)\r\n}\r\n\r\nandroid {\r\n    compileSdk 30\r\n\r\n    defaultConfig {\r\n        applicationId 'com.winlator'\r\n        minSdkVersion 26\r\n        targetSdkVersion 28\r\n        versionCode 18\r\n        versionName \"7.1.2-glibc\"\r\n    }\r\n\r\n    buildTypes {\r\n        debug {\r\n            minifyEnabled false\r\n            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    lintOptions {\r\n        checkReleaseBuilds false\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_17\r\n        targetCompatibility JavaVersion.VERSION_17\r\n    }\r\n\r\n    externalNativeBuild {\r\n        cmake {\r\n            version '3.22.1'\r\n            path 'src/main/cpp/CMakeLists.txt'\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation libs.appcompat\r\n    implementation libs.material\r\n    implementation libs.preference\r\n    implementation libs.xz\r\n    implementation libs.commons.compress\r\n    testImplementation libs.junit\r\n    androidTestImplementation libs.ext.junit\r\n    androidTestImplementation libs.espresso.core\r\n    implementation(libs.zstd.jni) { artifact { type = 'aar' } }\r\n    implementation 'androidx.appcompat:appcompat:1.4.0'\r\n    implementation 'androidx.preference:preference:1.1.1'\r\n    implementation 'com.google.android.material:material:1.4.0'\r\n    implementation 'com.github.luben:zstd-jni:1.5.2-3@aar'\r\n    implementation 'org.tukaani:xz:1.7'\r\n    implementation 'org.apache.commons:commons-compress:1.20'\r\n    implementation 'androidx.activity:activity-ktx:1.4.0'\r\n    implementation 'androidx.fragment:fragment-ktx:1.4.0'\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	
+++ b/build.gradle	
@@ -1,23 +1,13 @@
-buildscript {
-    repositories {
-        google()
-        mavenCentral()
-    }
-    dependencies {
-        classpath 'com.android.tools.build:gradle:8.1.2'
-    }
-}
-
-apply plugin: 'com.android.application'
 plugins {
-    alias(libs.plugins.android.application)
+    id 'com.android.application'
 }
 
 android {
+    namespace 'com.winlator' // Replace with your actual package name
     compileSdk 30
 
     defaultConfig {
-        applicationId 'com.winlator'
+        applicationId 'com.cmodded.winlator' // Replace with your actual package name
         minSdkVersion 26
         targetSdkVersion 28
         versionCode 18
Index: local.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>## This file must *NOT* be checked into Version Control Systems,\r\n# as it contains information specific to your local configuration.\r\n#\r\n# Location of the SDK. This is only used by Gradle.\r\n# For customization when using a Version Control System, please read the\r\n# header note.\r\n#Sun Aug 04 09:01:45 CDT 2024\r\nsdk.dir=C\\:\\\\Users\\\\alexs\\\\AppData\\\\Local\\\\Android\\\\Sdk\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/local.properties b/local.properties
--- a/local.properties	
+++ b/local.properties	
@@ -1,8 +1,8 @@
-## This file must *NOT* be checked into Version Control Systems,
+# This file must *NOT* be checked into Version Control Systems,
 # as it contains information specific to your local configuration.
 #
 # Location of the SDK. This is only used by Gradle.
 # For customization when using a Version Control System, please read the
 # header note.
 #Sun Aug 04 09:01:45 CDT 2024
-sdk.dir=C\:\\Users\\alexs\\AppData\\Local\\Android\\Sdk
+sdk.dir=C:\\Users\\alexs\\AppData\\Local\\Android\\Sdk
Index: src/main/java/com/winlator/ContainerDetailFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.winlator;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.DocumentsContract;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.CheckBox;\r\nimport android.widget.EditText;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.preference.PreferenceManager;\r\n\r\nimport com.winlator.box86_64.Box86_64Preset;\r\nimport com.winlator.box86_64.Box86_64PresetManager;\r\nimport com.winlator.box86_64.rc.RCManager;\r\nimport com.winlator.container.Container;\r\nimport com.winlator.container.ContainerManager;\r\nimport com.winlator.contentdialog.AddEnvVarDialog;\r\nimport com.winlator.contentdialog.DXVKConfigDialog;\r\nimport com.winlator.contentdialog.GraphicsDriverConfigDialog;\r\nimport com.winlator.contentdialog.VKD3DConfigDialog;\r\nimport com.winlator.contents.ContentProfile;\r\nimport com.winlator.contents.ContentsManager;\r\nimport com.winlator.core.AppUtils;\r\nimport com.winlator.core.Callback;\r\nimport com.winlator.core.DefaultVersion;\r\nimport com.winlator.core.EnvVars;\r\nimport com.winlator.core.FileUtils;\r\nimport com.winlator.core.KeyValueSet;\r\nimport com.winlator.core.PreloaderDialog;\r\nimport com.winlator.core.StringUtils;\r\nimport com.winlator.core.WineInfo;\r\nimport com.winlator.core.WineRegistryEditor;\r\nimport com.winlator.core.WineThemeManager;\r\nimport com.winlator.core.WineUtils;\r\nimport com.winlator.widget.CPUListView;\r\nimport com.winlator.widget.ColorPickerView;\r\nimport com.winlator.widget.EnvVarsView;\r\nimport com.winlator.widget.ImagePickerView;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class ContainerDetailFragment extends Fragment {\r\n    private ContainerManager manager;\r\n    private ContentsManager contentsManager;\r\n    private final int containerId;\r\n    private static Container container;\r\n    private PreloaderDialog preloaderDialog;\r\n    private JSONArray gpuCards;\r\n    private Callback<String> openDirectoryCallback;\r\n\r\n    private String graphicsDriverVersion;\r\n\r\n    private String tempGraphicsDriverVersion; // Temporary storage for the graphics driver version\r\n\r\n    public ContainerDetailFragment() {\r\n        this(0);\r\n    }\r\n\r\n    public ContainerDetailFragment(int containerId) {\r\n        this.containerId = containerId;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setHasOptionsMenu(false);\r\n        preloaderDialog = new PreloaderDialog(getActivity());\r\n\r\n        try {\r\n            gpuCards = new JSONArray(FileUtils.readString(getContext(), \"gpu_cards.json\"));\r\n        }\r\n        catch (JSONException e) {}\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        if (requestCode == MainActivity.OPEN_DIRECTORY_REQUEST_CODE && resultCode == Activity.RESULT_OK) {\r\n            if (data != null) {\r\n                String path = FileUtils.getFilePathFromUri(data.getData());\r\n                if (path != null && openDirectoryCallback != null) openDirectoryCallback.call(path);\r\n            }\r\n            openDirectoryCallback = null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        ((AppCompatActivity)getActivity()).getSupportActionBar().setTitle(isEditMode() ? R.string.edit_container : R.string.new_container);\r\n    }\r\n\r\n    public boolean isEditMode() {\r\n        return container != null;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup root, @Nullable Bundle savedInstanceState) {\r\n        final Context context = getContext();\r\n        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);\r\n        final View view = inflater.inflate(R.layout.container_detail_fragment, root, false);\r\n        manager = new ContainerManager(context);\r\n        container = containerId > 0 ? manager.getContainerById(containerId) : null;\r\n        contentsManager = new ContentsManager(context);\r\n        contentsManager.syncContents();\r\n\r\n        final EditText etName = view.findViewById(R.id.ETName);\r\n\r\n        if (isEditMode()) {\r\n            etName.setText(container.getName());\r\n            graphicsDriverVersion = container.getGraphicsDriverVersion();  // Use the existing version for editing\r\n        } else {\r\n            etName.setText(getString(R.string.container) + \"-\" + manager.getNextContainerId());\r\n//            graphicsDriverVersion = DefaultVersion.TURNIP;  // Default to the latest Turnip version for new containers\r\n        }\r\n        else etName.setText(getString(R.string.container)+\"-\"+manager.getNextContainerId());\r\n\r\n        final ArrayList<WineInfo> wineInfos = WineUtils.getInstalledWineInfos(context);\r\n        final Spinner sWineVersion = view.findViewById(R.id.SWineVersion);\r\n        //if (wineInfos.size() > 1) loadWineVersionSpinner(view, sWineVersion, wineInfos);\r\n        loadWineVersionSpinner(view, sWineVersion, wineInfos);\r\n\r\n        loadScreenSizeSpinner(view, isEditMode() ? container.getScreenSize() : Container.DEFAULT_SCREEN_SIZE);\r\n\r\n        final Spinner sGraphicsDriver = view.findViewById(R.id.SGraphicsDriver);\r\n        final Spinner sDXWrapper = view.findViewById(R.id.SDXWrapper);\r\n\r\n        final View vDXWrapperConfig = view.findViewById(R.id.BTDXWrapperConfig);\r\n        vDXWrapperConfig.setTag(isEditMode() ? container.getDXWrapperConfig() : \"\");\r\n\r\n        final View vGraphicsDriverConfig = view.findViewById(R.id.BTGraphicsDriverConfig);\r\n\r\n        setupDXWrapperSpinner(sDXWrapper, vDXWrapperConfig);\r\n        loadGraphicsDriverSpinner(sGraphicsDriver, sDXWrapper, vGraphicsDriverConfig,\r\n                isEditMode() ? container.getGraphicsDriver() : Container.DEFAULT_GRAPHICS_DRIVER,\r\n                isEditMode() ? container.getDXWrapper() : Container.DEFAULT_DXWRAPPER);\r\n\r\n        view.findViewById(R.id.BTHelpDXWrapper).setOnClickListener((v) -> AppUtils.showHelpBox(context, v, R.string.dxwrapper_help_content));\r\n\r\n        Spinner sAudioDriver = view.findViewById(R.id.SAudioDriver);\r\n        AppUtils.setSpinnerSelectionFromIdentifier(sAudioDriver, isEditMode() ? container.getAudioDriver() : Container.DEFAULT_AUDIO_DRIVER);\r\n\r\n        final CheckBox cbShowFPS = view.findViewById(R.id.CBShowFPS);\r\n        cbShowFPS.setChecked(isEditMode() && container.isShowFPS());\r\n\r\n        final CheckBox cbWoW64Mode = view.findViewById(R.id.CBWoW64Mode);\r\n        cbWoW64Mode.setChecked(!isEditMode() || container.isWoW64Mode());\r\n\r\n        final Spinner sStartupSelection = view.findViewById(R.id.SStartupSelection);\r\n        byte previousStartupSelection = isEditMode() ? container.getStartupSelection() : -1;\r\n        sStartupSelection.setSelection(previousStartupSelection != -1 ? previousStartupSelection : Container.STARTUP_SELECTION_ESSENTIAL);\r\n\r\n        final Spinner sBox86Preset = view.findViewById(R.id.SBox86Preset);\r\n        Box86_64PresetManager.loadSpinner(\"box86\", sBox86Preset, isEditMode() ? container.getBox86Preset() : preferences.getString(\"box86_preset\", Box86_64Preset.COMPATIBILITY));\r\n\r\n        final Spinner sBox64Preset = view.findViewById(R.id.SBox64Preset);\r\n        Box86_64PresetManager.loadSpinner(\"box64\", sBox64Preset, isEditMode() ? container.getBox64Preset() : preferences.getString(\"box64_preset\", Box86_64Preset.COMPATIBILITY));\r\n\r\n        final Spinner sRCFile = view.findViewById(R.id.SRCFile);\r\n        final int[] rcfileIds = {0};\r\n        RCManager rcManager = new RCManager(context);\r\n        RCManager.loadRCFileSpinner(rcManager, container == null ? 0 : container.getRCFileId(), sRCFile, id -> rcfileIds[0] = id);\r\n\r\n        final CPUListView cpuListView = view.findViewById(R.id.CPUListView);\r\n        final CPUListView cpuListViewWoW64 = view.findViewById(R.id.CPUListViewWoW64);\r\n\r\n        cpuListView.setCheckedCPUList(isEditMode() ? container.getCPUList(true) : Container.getFallbackCPUList());\r\n        cpuListViewWoW64.setCheckedCPUList(isEditMode() ? container.getCPUListWoW64(true) : Container.getFallbackCPUListWoW64());\r\n\r\n        createWineConfigurationTab(view);\r\n        final EnvVarsView envVarsView = createEnvVarsTab(view);\r\n        createWinComponentsTab(view, isEditMode() ? container.getWinComponents() : Container.DEFAULT_WINCOMPONENTS);\r\n        createDrivesTab(view);\r\n\r\n        AppUtils.setupTabLayout(view, R.id.TabLayout, R.id.LLTabWineConfiguration, R.id.LLTabWinComponents, R.id.LLTabEnvVars, R.id.LLTabDrives, R.id.LLTabAdvanced);\r\n\r\n        view.findViewById(R.id.BTConfirm).setOnClickListener((v) -> {\r\n            try {\r\n                String name = etName.getText().toString();\r\n                String screenSize = getScreenSize(view);\r\n                String envVars = envVarsView.getEnvVars();\r\n                String graphicsDriver = StringUtils.parseIdentifier(sGraphicsDriver.getSelectedItem());\r\n                String dxwrapper = StringUtils.parseIdentifier(sDXWrapper.getSelectedItem());\r\n                String dxwrapperConfig = vDXWrapperConfig.getTag().toString();\r\n                String audioDriver = StringUtils.parseIdentifier(sAudioDriver.getSelectedItem());\r\n                String wincomponents = getWinComponents(view);\r\n                String drives = getDrives(view);\r\n                boolean showFPS = cbShowFPS.isChecked();\r\n                String cpuList = cpuListView.getCheckedCPUListAsString();\r\n                String cpuListWoW64 = cpuListViewWoW64.getCheckedCPUListAsString();\r\n                boolean wow64Mode = cbWoW64Mode.isChecked();\r\n                byte startupSelection = (byte) sStartupSelection.getSelectedItemPosition();\r\n                String box86Preset = Box86_64PresetManager.getSpinnerSelectedId(sBox86Preset);\r\n                String box64Preset = Box86_64PresetManager.getSpinnerSelectedId(sBox64Preset);\r\n                String desktopTheme = getDesktopTheme(view);\r\n                int rcfileId = rcfileIds[0];\r\n\r\n                if (isEditMode()) {\r\n                    container.setName(name);\r\n                    container.setScreenSize(screenSize);\r\n                    container.setEnvVars(envVars);\r\n                    container.setCPUList(cpuList);\r\n                    container.setCPUListWoW64(cpuListWoW64);\r\n                    container.setGraphicsDriver(graphicsDriver);\r\n                    container.setGraphicsDriverVersion(graphicsDriverVersion); // Set the updated version here\r\n                    container.setDXWrapper(dxwrapper);\r\n                    container.setDXWrapperConfig(dxwrapperConfig);\r\n                    container.setAudioDriver(audioDriver);\r\n                    container.setWinComponents(wincomponents);\r\n                    container.setDrives(drives);\r\n                    container.setShowFPS(showFPS);\r\n                    container.setWoW64Mode(wow64Mode);\r\n                    container.setStartupSelection(startupSelection);\r\n                    container.setBox86Preset(box86Preset);\r\n                    container.setBox64Preset(box64Preset);\r\n                    container.setDesktopTheme(desktopTheme);\r\n                    container.setRcfileId(rcfileId);\r\n                    container.saveData();\r\n                    saveWineRegistryKeys(view);\r\n                    getActivity().onBackPressed();\r\n                } else {\r\n                    JSONObject data = new JSONObject();\r\n                    data.put(\"name\", name);\r\n                    data.put(\"screenSize\", screenSize);\r\n                    data.put(\"envVars\", envVars);\r\n                    data.put(\"cpuList\", cpuList);\r\n                    data.put(\"cpuListWoW64\", cpuListWoW64);\r\n                    data.put(\"graphicsDriver\", graphicsDriver);\r\n                    data.put(\"dxwrapper\", dxwrapper);\r\n                    data.put(\"dxwrapperConfig\", dxwrapperConfig);\r\n                    data.put(\"audioDriver\", audioDriver);\r\n                    data.put(\"wincomponents\", wincomponents);\r\n                    data.put(\"drives\", drives);\r\n                    data.put(\"showFPS\", showFPS);\r\n                    data.put(\"wow64Mode\", wow64Mode);\r\n                    data.put(\"startupSelection\", startupSelection);\r\n                    data.put(\"box86Preset\", box86Preset);\r\n                    data.put(\"box64Preset\", box64Preset);\r\n                    data.put(\"desktopTheme\", desktopTheme);\r\n                    data.put(\"rcfileId\", rcfileId);\r\n                    data.put(\"wineVersion\", sWineVersion.getSelectedItem().toString());\r\n\r\n                    preloaderDialog.show(R.string.creating_container);\r\n                    manager.createContainerAsync(data, (container) -> {\r\n                        if (container != null) {\r\n                            this.container = container;\r\n                            saveWineRegistryKeys(view);\r\n                        }\r\n                        preloaderDialog.close();\r\n                        getActivity().onBackPressed();\r\n                    });\r\n                }\r\n            }\r\n            catch (JSONException e) {}\r\n        });\r\n        return view;\r\n    }\r\n\r\n    private void saveWineRegistryKeys(View view) {\r\n        File userRegFile = new File(container.getRootDir(), \".wine/user.reg\");\r\n        try (WineRegistryEditor registryEditor = new WineRegistryEditor(userRegFile)) {\r\n            Spinner sCSMT = view.findViewById(R.id.SCSMT);\r\n            registryEditor.setDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"csmt\", sCSMT.getSelectedItemPosition() != 0 ? 3 : 0);\r\n\r\n            Spinner sGPUName = view.findViewById(R.id.SGPUName);\r\n            try {\r\n                JSONObject gpuName = gpuCards.getJSONObject(sGPUName.getSelectedItemPosition());\r\n                registryEditor.setDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"VideoPciDeviceID\", gpuName.getInt(\"deviceID\"));\r\n                registryEditor.setDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"VideoPciVendorID\", gpuName.getInt(\"vendorID\"));\r\n            }\r\n            catch (JSONException e) {}\r\n\r\n            Spinner sOffscreenRenderingMode = view.findViewById(R.id.SOffscreenRenderingMode);\r\n            registryEditor.setStringValue(\"Software\\\\Wine\\\\Direct3D\", \"OffScreenRenderingMode\", sOffscreenRenderingMode.getSelectedItem().toString().toLowerCase(Locale.ENGLISH));\r\n\r\n            Spinner sStrictShaderMath = view.findViewById(R.id.SStrictShaderMath);\r\n            registryEditor.setDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"strict_shader_math\", sStrictShaderMath.getSelectedItemPosition());\r\n\r\n            Spinner sVideoMemorySize = view.findViewById(R.id.SVideoMemorySize);\r\n            registryEditor.setStringValue(\"Software\\\\Wine\\\\Direct3D\", \"VideoMemorySize\", StringUtils.parseNumber(sVideoMemorySize.getSelectedItem()));\r\n\r\n            Spinner sMouseWarpOverride = view.findViewById(R.id.SMouseWarpOverride);\r\n            registryEditor.setStringValue(\"Software\\\\Wine\\\\DirectInput\", \"MouseWarpOverride\", sMouseWarpOverride.getSelectedItem().toString().toLowerCase(Locale.ENGLISH));\r\n\r\n            registryEditor.setStringValue(\"Software\\\\Wine\\\\Direct3D\", \"shader_backend\", \"glsl\");\r\n            registryEditor.setStringValue(\"Software\\\\Wine\\\\Direct3D\", \"UseGLSL\", \"enabled\");\r\n        }\r\n    }\r\n\r\n    private void createWineConfigurationTab(View view) {\r\n        Context context = getContext();\r\n\r\n        WineThemeManager.ThemeInfo desktopTheme = new WineThemeManager.ThemeInfo(isEditMode() ? container.getDesktopTheme() : WineThemeManager.DEFAULT_DESKTOP_THEME);\r\n        Spinner sDesktopTheme = view.findViewById(R.id.SDesktopTheme);\r\n        sDesktopTheme.setSelection(desktopTheme.theme.ordinal());\r\n        final ImagePickerView ipvDesktopBackgroundImage = view.findViewById(R.id.IPVDesktopBackgroundImage);\r\n        final ColorPickerView cpvDesktopBackgroundColor = view.findViewById(R.id.CPVDesktopBackgroundColor);\r\n        cpvDesktopBackgroundColor.setColor(desktopTheme.backgroundColor);\r\n\r\n        Spinner sDesktopBackgroundType = view.findViewById(R.id.SDesktopBackgroundType);\r\n        sDesktopBackgroundType.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                WineThemeManager.BackgroundType type = WineThemeManager.BackgroundType.values()[position];\r\n                ipvDesktopBackgroundImage.setVisibility(View.GONE);\r\n                cpvDesktopBackgroundColor.setVisibility(View.GONE);\r\n\r\n                if (type == WineThemeManager.BackgroundType.IMAGE) {\r\n                    ipvDesktopBackgroundImage.setVisibility(View.VISIBLE);\r\n                }\r\n                else if (type == WineThemeManager.BackgroundType.COLOR) {\r\n                    cpvDesktopBackgroundColor.setVisibility(View.VISIBLE);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {}\r\n        });\r\n        sDesktopBackgroundType.setSelection(desktopTheme.backgroundType.ordinal());\r\n\r\n        File containerDir = isEditMode() ? container.getRootDir() : null;\r\n        File userRegFile = new File(containerDir, \".wine/user.reg\");\r\n\r\n        try (WineRegistryEditor registryEditor = new WineRegistryEditor(userRegFile)) {\r\n            List<String> stateList = Arrays.asList(context.getString(R.string.disable), context.getString(R.string.enable));\r\n            Spinner sCSMT = view.findViewById(R.id.SCSMT);\r\n            sCSMT.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, stateList));\r\n            sCSMT.setSelection(registryEditor.getDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"csmt\", 3) != 0 ? 1 : 0);\r\n\r\n            Spinner sGPUName = view.findViewById(R.id.SGPUName);\r\n            loadGPUNameSpinner(sGPUName, registryEditor.getDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"VideoPciDeviceID\", 1728));\r\n\r\n            List<String> offscreenRenderingModeList = Arrays.asList(\"Backbuffer\", \"FBO\");\r\n            Spinner sOffscreenRenderingMode = view.findViewById(R.id.SOffscreenRenderingMode);\r\n            sOffscreenRenderingMode.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, offscreenRenderingModeList));\r\n            AppUtils.setSpinnerSelectionFromValue(sOffscreenRenderingMode, registryEditor.getStringValue(\"Software\\\\Wine\\\\Direct3D\", \"OffScreenRenderingMode\", \"fbo\"));\r\n\r\n            Spinner sStrictShaderMath = view.findViewById(R.id.SStrictShaderMath);\r\n            sStrictShaderMath.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, stateList));\r\n            sStrictShaderMath.setSelection(Math.min(registryEditor.getDwordValue(\"Software\\\\Wine\\\\Direct3D\", \"strict_shader_math\", 1), 1));\r\n\r\n            Spinner sVideoMemorySize = view.findViewById(R.id.SVideoMemorySize);\r\n            String videoMemorySize = registryEditor.getStringValue(\"Software\\\\Wine\\\\Direct3D\", \"VideoMemorySize\", \"2048\");\r\n            AppUtils.setSpinnerSelectionFromNumber(sVideoMemorySize, videoMemorySize);\r\n\r\n            List<String> mouseWarpOverrideList = Arrays.asList(context.getString(R.string.disable), context.getString(R.string.enable), context.getString(R.string.force));\r\n            Spinner sMouseWarpOverride = view.findViewById(R.id.SMouseWarpOverride);\r\n            sMouseWarpOverride.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, mouseWarpOverrideList));\r\n            AppUtils.setSpinnerSelectionFromValue(sMouseWarpOverride, registryEditor.getStringValue(\"Software\\\\Wine\\\\DirectInput\", \"MouseWarpOverride\", \"disable\"));\r\n        }\r\n    }\r\n\r\n    private void loadGPUNameSpinner(Spinner spinner, int selectedDeviceID) {\r\n        List<String> values = new ArrayList<>();\r\n        int selectedPosition = 0;\r\n\r\n        try {\r\n            for (int i = 0; i < gpuCards.length(); i++) {\r\n                JSONObject item = gpuCards.getJSONObject(i);\r\n                if (item.getInt(\"deviceID\") == selectedDeviceID) selectedPosition = i;\r\n                values.add(item.getString(\"name\"));\r\n            }\r\n        }\r\n        catch (JSONException e) {}\r\n\r\n        spinner.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, values));\r\n        spinner.setSelection(selectedPosition);\r\n    }\r\n\r\n    public static String getScreenSize(View view) {\r\n        Spinner sScreenSize = view.findViewById(R.id.SScreenSize);\r\n        String value = sScreenSize.getSelectedItem().toString();\r\n        if (value.equalsIgnoreCase(\"custom\")) {\r\n            value = Container.DEFAULT_SCREEN_SIZE;\r\n            String strWidth = ((EditText)view.findViewById(R.id.ETScreenWidth)).getText().toString().trim();\r\n            String strHeight = ((EditText)view.findViewById(R.id.ETScreenHeight)).getText().toString().trim();\r\n            if (strWidth.matches(\"[0-9]+\") && strHeight.matches(\"[0-9]+\")) {\r\n                int width = Integer.parseInt(strWidth);\r\n                int height = Integer.parseInt(strHeight);\r\n                if ((width % 2) == 0 && (height % 2) == 0) return width+\"x\"+height;\r\n            }\r\n        }\r\n        return StringUtils.parseIdentifier(value);\r\n    }\r\n\r\n    private String getDesktopTheme(View view) {\r\n        Spinner sDesktopBackgroundType = view.findViewById(R.id.SDesktopBackgroundType);\r\n        WineThemeManager.BackgroundType type = WineThemeManager.BackgroundType.values()[sDesktopBackgroundType.getSelectedItemPosition()];\r\n        Spinner sDesktopTheme = view.findViewById(R.id.SDesktopTheme);\r\n        ColorPickerView cpvDesktopBackground = view.findViewById(R.id.CPVDesktopBackgroundColor);\r\n        WineThemeManager.Theme theme = WineThemeManager.Theme.values()[sDesktopTheme.getSelectedItemPosition()];\r\n\r\n       String desktopTheme = theme+\",\"+type+\",\"+cpvDesktopBackground.getColorAsString();\r\n        if (type == WineThemeManager.BackgroundType.IMAGE) {\r\n            File userWallpaperFile = WineThemeManager.getUserWallpaperFile(getContext());\r\n            desktopTheme += \",\"+(userWallpaperFile.isFile() ? userWallpaperFile.lastModified() : \"0\");\r\n        }\r\n        return desktopTheme;\r\n    }\r\n\r\n    public static void loadScreenSizeSpinner(View view, String selectedValue) {\r\n        final Spinner sScreenSize = view.findViewById(R.id.SScreenSize);\r\n\r\n        final LinearLayout llCustomScreenSize = view.findViewById(R.id.LLCustomScreenSize);\r\n        sScreenSize.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                String value = sScreenSize.getItemAtPosition(position).toString();\r\n                llCustomScreenSize.setVisibility(value.equalsIgnoreCase(\"custom\") ? View.VISIBLE : View.GONE);\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {}\r\n        });\r\n\r\n        boolean found = AppUtils.setSpinnerSelectionFromIdentifier(sScreenSize, selectedValue);\r\n        if (!found) {\r\n            AppUtils.setSpinnerSelectionFromValue(sScreenSize, \"custom\");\r\n            String[] screenSize = selectedValue.split(\"x\");\r\n            ((EditText)view.findViewById(R.id.ETScreenWidth)).setText(screenSize[0]);\r\n            ((EditText)view.findViewById(R.id.ETScreenHeight)).setText(screenSize[1]);\r\n        }\r\n    }\r\n\r\n    // This method shows the GraphicsDriverConfigDialog\r\n    private void showGraphicsDriverConfigDialog(View anchor) {\r\n        new GraphicsDriverConfigDialog(anchor, manager, container, graphicsDriverVersion, version -> {\r\n            // Capture the selected version\r\n            graphicsDriverVersion = version;\r\n        }).show();\r\n    }\r\n\r\n    // Original method: Used for compatibility with ShortcutSettingsDialog\r\n    public static void loadGraphicsDriverSpinner(final Spinner sGraphicsDriver, final Spinner sDXWrapper, String selectedGraphicsDriver, String selectedDXWrapper) {\r\n        final Context context = sGraphicsDriver.getContext();\r\n        final String[] dxwrapperEntries = context.getResources().getStringArray(R.array.dxwrapper_entries);\r\n\r\n        Runnable update = () -> {\r\n            String graphicsDriver = StringUtils.parseIdentifier(sGraphicsDriver.getSelectedItem());\r\n            boolean addAll = graphicsDriver.equals(\"turnip\");\r\n\r\n            ArrayList<String> items = new ArrayList<>();\r\n            for (String value : dxwrapperEntries) {\r\n                if (addAll || (!value.equals(\"DXVK\") && !value.equals(\"VKD3D\"))) {\r\n                    items.add(value);\r\n                }\r\n            }\r\n            sDXWrapper.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, items.toArray(new String[0])));\r\n            AppUtils.setSpinnerSelectionFromIdentifier(sDXWrapper, selectedDXWrapper);\r\n        };\r\n\r\n        sGraphicsDriver.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                update.run();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {}\r\n        });\r\n\r\n        AppUtils.setSpinnerSelectionFromIdentifier(sGraphicsDriver, selectedGraphicsDriver);\r\n        update.run();\r\n    }\r\n\r\n    // New method: Adds support for the GraphicsDriverConfigDialog\r\n    public void loadGraphicsDriverSpinner(final Spinner sGraphicsDriver, final Spinner sDXWrapper, final View vGraphicsDriverConfig, String selectedGraphicsDriver, String selectedDXWrapper) {\r\n        final Context context = sGraphicsDriver.getContext();\r\n        final String[] dxwrapperEntries = context.getResources().getStringArray(R.array.dxwrapper_entries);\r\n\r\n        Runnable update = () -> {\r\n            String graphicsDriver = StringUtils.parseIdentifier(sGraphicsDriver.getSelectedItem());\r\n            boolean isTurnip = graphicsDriver.equals(\"turnip\");\r\n\r\n            // Update the DXWrapper spinner\r\n            ArrayList<String> items = new ArrayList<>();\r\n            for (String value : dxwrapperEntries) {\r\n                if (isTurnip || (!value.equals(\"DXVK\") && !value.equals(\"VKD3D\"))) {\r\n                    items.add(value);\r\n                }\r\n            }\r\n            sDXWrapper.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, items.toArray(new String[0])));\r\n            AppUtils.setSpinnerSelectionFromIdentifier(sDXWrapper, selectedDXWrapper);\r\n\r\n            // Update the gear icon for the graphics driver\r\n            if (isTurnip) {\r\n                vGraphicsDriverConfig.setOnClickListener((v) -> {\r\n                    if (container != null) {\r\n                        showGraphicsDriverConfigDialog(vGraphicsDriverConfig);\r\n                    } else {\r\n                        Toast.makeText(context, \"Please save this container before attempting to change the driver version\", Toast.LENGTH_LONG).show();\r\n                    }\r\n                });\r\n                vGraphicsDriverConfig.setVisibility(View.VISIBLE);\r\n            } else {\r\n                vGraphicsDriverConfig.setVisibility(View.GONE);  // VirGL doesn't allow version selection\r\n            }\r\n        };\r\n\r\n        sGraphicsDriver.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                update.run();\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {}\r\n        });\r\n\r\n        AppUtils.setSpinnerSelectionFromIdentifier(sGraphicsDriver, selectedGraphicsDriver);\r\n        update.run();\r\n    }\r\n\r\n\r\n\r\n\r\n    public static void setupDXWrapperSpinner(final Spinner sDXWrapper, final View vDXWrapperConfig) {\r\n        sDXWrapper.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                String dxwrapper = StringUtils.parseIdentifier(sDXWrapper.getSelectedItem());\r\n                if (dxwrapper.equals(\"dxvk\")) {\r\n                    vDXWrapperConfig.setOnClickListener((v) -> (new DXVKConfigDialog(vDXWrapperConfig)).show());\r\n                    vDXWrapperConfig.setVisibility(View.VISIBLE);\r\n                }\r\n                else if (dxwrapper.equals(\"vkd3d\")) {\r\n                    vDXWrapperConfig.setOnClickListener((v) -> (new VKD3DConfigDialog(vDXWrapperConfig)).show());\r\n                    vDXWrapperConfig.setVisibility(View.VISIBLE);\r\n                } else vDXWrapperConfig.setVisibility(View.GONE);\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {}\r\n        });\r\n    }\r\n\r\n    public static String getWinComponents(View view) {\r\n        ViewGroup parent = view.findViewById(R.id.LLTabWinComponents);\r\n        ArrayList<View> views = new ArrayList<>();\r\n        AppUtils.findViewsWithClass(parent, Spinner.class, views);\r\n        String[] wincomponents = new String[views.size()];\r\n\r\n        for (int i = 0; i < views.size(); i++) {\r\n            Spinner spinner = (Spinner)views.get(i);\r\n            wincomponents[i] = spinner.getTag()+\"=\"+spinner.getSelectedItemPosition();\r\n        }\r\n        return String.join(\",\", wincomponents);\r\n    }\r\n\r\n    public static void createWinComponentsTab(View view, String wincomponents) {\r\n        Context context = view.getContext();\r\n        LayoutInflater inflater = LayoutInflater.from(context);\r\n        ViewGroup tabView = view.findViewById(R.id.LLTabWinComponents);\r\n        ViewGroup directxSectionView = tabView.findViewById(R.id.LLWinComponentsDirectX);\r\n        ViewGroup generalSectionView = tabView.findViewById(R.id.LLWinComponentsGeneral);\r\n\r\n        for (String[] wincomponent : new KeyValueSet(wincomponents)) {\r\n            ViewGroup parent = wincomponent[0].startsWith(\"direct\") ? directxSectionView : generalSectionView;\r\n            View itemView = inflater.inflate(R.layout.wincomponent_list_item, parent, false);\r\n            ((TextView)itemView.findViewById(R.id.TextView)).setText(StringUtils.getString(context, wincomponent[0]));\r\n            Spinner spinner = itemView.findViewById(R.id.Spinner);\r\n            spinner.setSelection(Integer.parseInt(wincomponent[1]), false);\r\n            spinner.setTag(wincomponent[0]);\r\n            parent.addView(itemView);\r\n        }\r\n    }\r\n\r\n    private EnvVarsView createEnvVarsTab(final View view) {\r\n        final Context context = view.getContext();\r\n        final EnvVarsView envVarsView = view.findViewById(R.id.EnvVarsView);\r\n        envVarsView.setEnvVars(new EnvVars(isEditMode() ? container.getEnvVars() : Container.DEFAULT_ENV_VARS));\r\n        view.findViewById(R.id.BTAddEnvVar).setOnClickListener((v) -> (new AddEnvVarDialog(context, envVarsView)).show());\r\n        return envVarsView;\r\n    }\r\n\r\n    private String getDrives(View view) {\r\n        LinearLayout parent = view.findViewById(R.id.LLDrives);\r\n        String drives = \"\";\r\n\r\n        for (int i = 0; i < parent.getChildCount(); i++) {\r\n            View child = parent.getChildAt(i);\r\n            Spinner spinner = child.findViewById(R.id.Spinner);\r\n            EditText editText = child.findViewById(R.id.EditText);\r\n            String path = editText.getText().toString().trim();\r\n            if (!path.isEmpty()) drives += spinner.getSelectedItem()+path;\r\n        }\r\n        return drives;\r\n    }\r\n\r\n    private void createDrivesTab(View view) {\r\n        final Context context = getContext();\r\n\r\n        final LinearLayout parent = view.findViewById(R.id.LLDrives);\r\n        final View emptyTextView = view.findViewById(R.id.TVDrivesEmptyText);\r\n        LayoutInflater inflater = LayoutInflater.from(context);\r\n        final String drives = isEditMode() ? container.getDrives() : Container.DEFAULT_DRIVES;\r\n        final String[] driveLetters = new String[Container.MAX_DRIVE_LETTERS];\r\n        for (int i = 0; i < driveLetters.length; i++) driveLetters[i] = ((char)(i + 68))+\":\";\r\n\r\n        Callback<String[]> addItem = (drive) -> {\r\n            final View itemView = inflater.inflate(R.layout.drive_list_item, parent, false);\r\n            Spinner spinner = itemView.findViewById(R.id.Spinner);\r\n            spinner.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, driveLetters));\r\n            AppUtils.setSpinnerSelectionFromValue(spinner, drive[0]+\":\");\r\n\r\n            final EditText editText = itemView.findViewById(R.id.EditText);\r\n            editText.setText(drive[1]);\r\n\r\n            itemView.findViewById(R.id.BTSearch).setOnClickListener((v) -> {\r\n                openDirectoryCallback = (path) -> {\r\n                    drive[1] = path;\r\n                    editText.setText(path);\r\n                };\r\n                Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);\r\n                intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, Uri.fromFile(Environment.getExternalStorageDirectory()));\r\n                getActivity().startActivityFromFragment(this, intent, MainActivity.OPEN_DIRECTORY_REQUEST_CODE);\r\n            });\r\n\r\n            itemView.findViewById(R.id.BTRemove).setOnClickListener((v) -> {\r\n                parent.removeView(itemView);\r\n                if (parent.getChildCount() == 0) emptyTextView.setVisibility(View.VISIBLE);\r\n            });\r\n            parent.addView(itemView);\r\n        };\r\n        for (String[] drive : Container.drivesIterator(drives)) addItem.call(drive);\r\n\r\n        view.findViewById(R.id.BTAddDrive).setOnClickListener((v) -> {\r\n            if (parent.getChildCount() >= Container.MAX_DRIVE_LETTERS) return;\r\n            final String nextDriveLetter = String.valueOf(driveLetters[parent.getChildCount()].charAt(0));\r\n            addItem.call(new String[]{nextDriveLetter, \"\"});\r\n        });\r\n\r\n        if (drives.isEmpty()) emptyTextView.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    private void loadWineVersionSpinner(final View view, Spinner sWineVersion, final ArrayList<WineInfo> wineInfos) {\r\n        final Context context = getContext();\r\n        sWineVersion.setEnabled(!isEditMode());\r\n//        sWineVersion.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n//            @Override\r\n//            public void onItemSelected(AdapterView<?> parent, View v, int position, long id) {\r\n//                WineInfo wineInfo = wineInfos.get(position);\r\n//                boolean isMainWineVersion = WineInfo.isMainWineVersion(wineInfo.identifier());\r\n//                CheckBox cbWoW64Mode = view.findViewById(R.id.CBWoW64Mode);\r\n//                cbWoW64Mode.setEnabled(isMainWineVersion);\r\n//                if (!isMainWineVersion) cbWoW64Mode.setChecked(false);\r\n//            }\r\n//\r\n//            @Override\r\n//            public void onNothingSelected(AdapterView<?> parent) {}\r\n//        });\r\n//        view.findViewById(R.id.LLWineVersion).setVisibility(View.VISIBLE);\r\n//        sWineVersion.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, wineInfos));\r\n//        if (isEditMode()) AppUtils.setSpinnerSelectionFromValue(sWineVersion, WineInfo.fromIdentifier(context, container.getWineVersion()).toString());\r\n        view.findViewById(R.id.LLWineVersion).setVisibility(View.VISIBLE);\r\n        ArrayList<String> wineVersions = new ArrayList<>();\r\n        wineVersions.add(WineInfo.MAIN_WINE_VERSION.identifier());\r\n        for (ContentProfile profile : contentsManager.getProfiles(ContentProfile.ContentType.CONTENT_TYPE_WINE))\r\n            wineVersions.add(ContentsManager.getEntryName(profile));\r\n        sWineVersion.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, wineVersions));\r\n        if (isEditMode()) AppUtils.setSpinnerSelectionFromValue(sWineVersion, container.getWineVersion());\r\n    }\r\n\r\n    public static void updateGraphicsDriverSpinner(Context context, ContentsManager manager, Spinner spinner) {\r\n        String[] originalItems = context.getResources().getStringArray(R.array.graphics_driver_entries);\r\n        List<String> itemList = new ArrayList<>(Arrays.asList(originalItems));\r\n        for (ContentProfile profile : manager.getProfiles(ContentProfile.ContentType.CONTENT_TYPE_TURNIP))\r\n            itemList.add(ContentsManager.getEntryName(profile));\r\n        for (ContentProfile profile : manager.getProfiles(ContentProfile.ContentType.CONTENT_TYPE_VIRGL))\r\n            itemList.add(ContentsManager.getEntryName(profile));\r\n        spinner.setAdapter(new ArrayAdapter<>(context, android.R.layout.simple_spinner_dropdown_item, itemList));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/winlator/ContainerDetailFragment.java b/src/main/java/com/winlator/ContainerDetailFragment.java
--- a/src/main/java/com/winlator/ContainerDetailFragment.java	
+++ b/src/main/java/com/winlator/ContainerDetailFragment.java	
@@ -139,7 +139,6 @@
             etName.setText(getString(R.string.container) + "-" + manager.getNextContainerId());
 //            graphicsDriverVersion = DefaultVersion.TURNIP;  // Default to the latest Turnip version for new containers
         }
-        else etName.setText(getString(R.string.container)+"-"+manager.getNextContainerId());
 
         final ArrayList<WineInfo> wineInfos = WineUtils.getInstalledWineInfos(context);
         final Spinner sWineVersion = view.findViewById(R.id.SWineVersion);
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>distributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-8.5-bin.zip\r\nnetworkTimeout=10000\r\nvalidateDistributionUrl=true\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties	
+++ b/gradle/wrapper/gradle-wrapper.properties	
@@ -1,6 +1,7 @@
+#Sat Aug 17 21:42:10 CDT 2024
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-bin.zip
 networkTimeout=10000
 validateDistributionUrl=true
 zipStoreBase=GRADLE_USER_HOME
